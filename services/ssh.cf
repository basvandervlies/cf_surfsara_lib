#
## ssh.cf  @SURF
#
bundle common ssh()
{
    vars:
        any::
            "config_dir"  string => "/etc/ssh";

            "banner_file" string => "$(config_dir)/sshd_banner";
            "client_file" string => "$(config_dir)/ssh_config";
            "server_file" string => "$(config_dir)/sshd_config";
            "ssh_keygen"  string => "/usr/bin/ssh-keygen";

            "owner" string => "root";
            "group" string => "root";

            ## Mustache templates
            "template_2_destination" data => parsejson('
                    {
                        "ssh.mustache"  : "$(client_file)",
                        "sshd.mustache" : "$(server_file)",
                        "sshd_banner.mustache"  : "$(banner_file)",
                    }
                ');

        debian.!debian8::
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "openssh-client" : "",
                            "openssh-server" : ""
                        }
                    }
                ');

        debian_8::
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "dbus" : "",
                            "libpam-systemd" : "",
                            "openssh-client" : "",
                            "openssh-server" : "",
                            "openssh-blacklist" : ""
                        }
                    }
                ');

        debian::
            "service_name"      string => "ssh";
            "sftp_server_path"  string => "/usr/lib/openssh/sftp-server",
                comment => "Used in ssh default.json";

        centos::
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "openssh" : "",
                            "openssh-askpass" : "",
                            "openssh-clients" : "",
                            "openssh-ldap" : "",
                            "openssh-server" : "",
                        }
                    }
                ');
            "service_name"      string => "sshd";
            "sftp_server_path"  string => "/usr/libexec/openssh/sftp-server",
                comment => "Used in ssh default.json";

        sles::
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "libssh2-1" : "",
                            "openssh" : "",
                        }
                    }
                ');
            "service_name"      string => "sshd";
            "sftp_server_path"  string => "/usr/lib/ssh/sftp-server",
                comment => "Used in ssh default.json";

        systemd::
            "restart"          string => "$(paths.path[systemctl]) restart $(service_name)";
        !systemd::
            "restart"          string => "$(paths.path[service]) $(service_name) restart";
}

bundle agent ssh_autorun()
{
    meta:
        "tags" slist => { "service_ssh", "template_ssh" };

    methods:
        any::
            "" usebundle => scl_data_autorun("ssh");
            "" usebundle => ssh_install();
            "" usebundle => ssh_config();
            "" usebundle => ssh_daemons_check();
}

bundle agent ssh_daemons_restart()
{
    commands:
        any::
            "$(ssh.restart)";

    reports:
        any::
            "sshd has been restarted";
}

bundle agent ssh_daemons_check()
{
    processes:
        debian|centos::
            "/usr/sbin/sshd.*"
                comment     => "Check if sshd is running",
                process_count   => check_range("ssh", "1", "999999"),
                process_select  => scl_select_parent_process("1");

    methods:
        ssh_out_of_range::
            "any" usebundle => ssh_daemons_restart();

    reports:
        ssh_out_of_range::
            "No sshd process is running with PPID 1";

}

bundle agent ssh_install()
{
    methods:
        "" usebundle => scl_service_packages("ssh", "@(ssh.packages)");
}

bundle agent ssh_config()
{
    vars:
        any::
            "ssh_config_files" slist => getvalues("ssh.template_2_destination");

    classes:
        any::
            "ssh_copy_files_set" expression => isvariable("scl.ssh[copy_files]"),
                comment => "Must we copy extra files for ssh bundle";

    methods:
        any::
            "" usebundle => scl_mustache_autorun("ssh");
            "" usebundle => ssh_daemons_restart(),
                if => or(
                    canonify("scl$(ssh.server_file)")
                    );

        ssh_copy_files_set::
            "" usebundle => scl_service_copy_files("ssh");

    files:
        any::
            "$(ssh.config_dir)/.*_key"
                comment         => "Make sure that all key files are 0600 and owner root",
                perms           => mog("0600", "root", "root");

           "$(ssh_config_files)"
                comment         => "Make sure that the config files are 0644 and owner root",
                perms           => mog("0644", "root", "root");

        centos::
            "/usr/bin/rsh"
                comment         => "This is only needed for CentOS for software that still depend on rsh command",
                perms           => mog("0777", "root", "root"),
                link_from       => ln_s("/usr/bin/ssh"),
                move_obstructions => "true";

    commands:
        SSH_KEYGEN::
            "$(ssh.ssh_keygen) $(scl.ssh[keygen_opt])";
}
@if minimum_version(99.9)
# ssh

Source: [ssh.cf](/services/ssh.cf)

This bundle installs ssh software on a node.

This bundle will generate these files from mustache templates:
 * /etc//ssh/ssh.conf
 * /etc//ssh/sshd_banner
 * /etc//ssh/sshd.conf

If one of the files is changed then the following ''class'' will be set:
 * scl_etc_ssh_ssh_conf
 * scl_etc_ssh_sshd_banner
 * scl_etc_ssh_sshd_conf

These files will be generated with the aid of mustache templates with json data.
the templates are located in:
 * templates/ssh/
 * templates/ssh/json

The following clases can be set via def.cf/json:
 *  `USE_DEPRICATED_OPTIONS`:  These options are not used anymore
 *  `KEYGEN`: Must we generate host keys, command line options can bet set via json
 *  `PUBKEY_AUTHENTICATION`: Enable ssh public keys via `AuthorizedKeysCommand`

The following json variables can be set in def.cf/json to  invoke files bundles:
 * copy_files: See [files.cf](/masterfiles/lib/scl/files.cf)
 * copy_dirs: See [files.cf](/masterfiles/lib/scl/files.cf)

## Usage

The bundle can be run via:
 * `def.scl_services_enabled`
```json
"vars": {
    "scl_services_enabled": [
            "...",
            "ssh",
            "..."
    ]
}
```

The bundle will aways read the [default.json](/templates/ssh/json/default.json) file
and extra json file(s) can be specified via:
 * def.cf
```
vars:
    any::
        "ssh_json_files" slist => { "policy_server.json" };
```

The variable must be ''ssh_json_files'' and with this setup 1 extra json file will be  merged.

### DEBUG

if you want to debug this bundle set the `DEBUG_ssh` class, eg:
 * `-DDEBUG_ssh`

## def.cf/json

See [default.json](/templates/ssh/json/default.json) what the default values are and
which variables can be overriden

Here are some examples how to use it:

 * specify ssh configuration in def.cf:
```
vars:
    "ssh_json_files" slist => { "policy_server.json" };
```

 * Set/Override the daemon options variable in ''def.json'':
```json
        "ssh" : {
            "classes": {
                "keygen": [ "any" ]
            },
            "MaxAuthTries": "6",
            "X11Forwarding": "no",
        },
```

 * override server setting in def.cf
```
vars:
    "ssh" data => parsejson( '{ "X11Forwarding":  "no"  }' );
```

### copy_files

When this variable is set it will copy the specified file to the `ssh.config_dir`, eg:
```json
"copy_files": [
    {
        "dest": "$(ssh.config_dir)/shosts.equiv",
        "source": "cf_bundles_dir/ssh/lisa/shosts.equiv",
        "mog": [ "0644", "root", "root" ]
    },
    {
        "dest": "$(ssh.config_dir)/ssh_known_hosts2",
        "source": "cf_bundles_dir/ssh/lisa/ssh_known_hosts2",
        "mog": [ "0644", "root", "root" ],
        "run_bundle": "ssh_daemons_restart"
    }
]
```
where `cf_bundles_dir` is a ''cf-serverd shortcut''.
@endif
