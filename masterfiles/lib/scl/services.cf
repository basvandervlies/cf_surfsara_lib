#
##  SURFsara services.cf
#
@if minimum_version(99.9)
# services.cf

Source: [services.cf](/masterfiles/lib/scl/services.cf)

You can control which services must be run by specifying the following variable in:
 * def.json
```json
"scl_services_enabled": [ "ssh", "ntp" ]
```

 * def.cf
```
"scl_services_enabled" slist => [ "ssh", "ntp" ];
```

This variable will include the cfengine services file from the directory
`def.scl_services_dir` (default value: scl/services) and run all bundles that have
the meta tag, eg: `template_ssh`. The bundle run can be protected by an class
statement, default is `any`, eg:
```json
"ssh": {
    "run_class": "debian|centos"
}
```
This will run the ssh service only for debian and centos hosts.

When `def.scl_services_enabled` is defined it will execute these bundles:
 1. first read merge all json data for all defined services (`scl_services_data`)
 1. expand the CFengine variables for all service bundle data (`scl_services_data_expand`)
 1. run the service  with the specified json data `(scl_services_run`)
@endif
bundle common scl_services
{
    vars:
        "enabled" slist => { @(def.scl_services_enabled) },
            ifvarclass => and(
                    isvariable("def.scl_services_enabled")
                );

        "enabled" slist => {},
            ifvarclass => and(
                    not(isvariable("def.scl_services_enabled"))
                );

        "dir" string => ifelse(
            isvariable( "def.scl_services_dir"), $(def.scl_services_dir),
            "services/scl");

    classes:
        "scl_services_set" expression => isvariable("def.scl_services_enabled");
}

bundle agent scl_services_autorun
{
    vars:
        "inputs" slist => maplist("$(scl_services.dir)/$(this).cf", @(scl_services.enabled));

    methods:
        scl_services_set::
            "" usebundle => scl_services_data(@(scl_services.enabled)),
                comment => "fetch/merge json data for all enabled services";

            "" usebundle => scl_services_data_expand(),
                comment => "Expand cross reference bundle variables";

            "" usebundle => scl_services_run("$(scl_services.enabled)");

    reports:
        scl_services_set::
            "$(this.bundle) service enabled: $(scl_services.enabled)"
                ifvarclass => "DEBUG|DEBUG_services|DEBUG_$(this.bundle)";
        !scl_services_set::
            "$(this.bundle) no service enabled, set 'def.scl_services_enabled'"
                ifvarclass => "DEBUG|DEBUG_services|DEBUG_$(this.bundle)";
}

bundle agent scl_services_data(services)
{
    methods:
        "" usebundle => scl_data_autorun("$(services)");
}

bundle agent scl_services_data_expand()
{
    vars:
        any::
            "empty_list" slist  => { };

    methods:
        any::
            "" usebundle => scl("expand_all_service_data", "@(empty_list)");
}

bundle agent scl_services_run(service)
{
    vars:
        any::
            "run_bundles" slist => bundlesmatching(".*", "template_$(service)"),
                comment => "Fetch all bundles by tage name in all namespaces";

            "run_class_var" slist => getvalues("scl.$(service)[run_class]"),
                comment => "Only run service when the specified classes are set";

            "run_class_var_str" string => format("%S", "run_class_var"),
                ifvarclass => "DEBUG|DEBUG_services|DEBUG_$(this.bundle)";

    classes:
        any::
            "run_class_set" expression => reglist("@(run_class_var)", ".+"),
                comment => "Service has specified classes. so check if there are met, if not set assume 'any' class";

            "run_class" expression => "$(run_class_var)",
                comment => "Run service if run_class definitions are met",
                ifvarclass => "run_class_set";

    methods:
        any::
            "" usebundle => $(run_bundles),
                comment => "Run service bundle if run_class is met or if run_class is absent",
                classes => results("namespace", "$(service)"),
                ifvarclass => or(
                    "run_class",
                    "!run_class_set"
                    );

    reports:
        any::
            "$(this.bundle): '$(service)' is enabled for `any' class"
                ifvarclass => and(
                    "DEBUG|DEBUG_services|DEBUG_$(this.bundle)",
                    "!run_class_set"
                    );

            "$(this.bundle): '$(service)' is only enabled for class: `$(run_class_var_str)`"
                ifvarclass => and(
                        "DEBUG|DEBUG_services|DEBUG_$(this.bundle)",
                        "run_class_set"
                        );
}


body file control
{
    inputs => {
        @(scl_services_autorun.inputs)
    };
}
