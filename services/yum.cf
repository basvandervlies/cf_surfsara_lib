#
## yum.cf  @SURF
#
bundle common yum
{
    vars:
        any::
            "yum_command"   string => "/usr/bin/yum";
            "config_file"   string => "/etc/yum.conf";
            "config_dir"    string => "/etc/yum";
            "repos_dir"     string => "/etc/yum.repos.d";
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "yum-plugin-security" : ""
                        }
                    }
                ');

            "template_2_destination" data => parsejson('
                {
                    "yum.conf.mustache": "$(config_file)"
                }
            ');
}

bundle agent yum_action()
{
    methods:
        Security::
            "yum_action:security"   usebundle => yum_security_update();

        Upgrade|Upgrade_force::
            "yum_action:update"     usebundle => yum_update();
}

bundle agent yum_update()
{
    commands:
        "$(yum.yum_command)"
            args => "--quiet clean all";

        "$(yum.yum_command)"
            args => "--quiet list updates";

        "$(yum.yum_command)"
            args => "--quiet --assumeyes update";
}

bundle agent yum_security_update()
{
    commands:
        "$(yum.yum_command)"
            args => "--quiet clean all";

        "$(yum.yum_command)"
            args => "--quiet --security list updates";

        "$(yum.yum_command)"
            args => "--quiet --security --assumeyes update";
}

bundle agent yum_autorun()
{
    meta:
        "tags"  slist => {"service_yum", "template_yum"};

    methods:
        "" usebundle => yum_install();
        "" usebundle => yum_config();
        "" usebundle => yum_repository();
}

bundle agent yum_install
{
    methods:
        "" usebundle => scl_service_packages("yum", "@(yum.packages)");
}

bundle agent yum_config
{
    methods:
        "" usebundle => scl_mustache_autorun("yum");
}

bundle agent yum_repository()
{
    classes:
        "YUM_REPOS_FILE_LIST_POPULATED"  expression => reglist("@(repository_exclude_files)", ".*repo$");

    vars:
        any::
            "template_file" string => "repository.mustache";

            "repository_names" slist => getindices("scl.$(this.bundle)");

            "repository_exclude_files" slist => maplist("$(this).repo", @(repository_names));
            "template_2_destination" data => parsejson('{ "$(template_file)" :  "no_destination_defined_is_generated"  }');


        DEBUG_yum|DEBUG_yum_repository::
            "repository_exclude_files_str" string => format("%S", repository_exclude_files);
            "template_2_destination_str" string => format("%S", template_2_destination);

    files:
        ## Well i need to wait to the slist repositories_files is actually filled with data
        YUM_REPOS_FILE_LIST_POPULATED::
            "$(yum.repos_dir)"
                comment         => "Remove yum files that are not maintained by CFEngine",
                delete          => scl_tidyfiles,
                file_select     => ex_list("@(repository_exclude_files)"),
                depth_search    => recurse("inf");

    methods:
        any::
            "" usebundle => scl_data_autorun("$(this.bundle)");
            "" usebundle => scl_mustache_copy("$(this.bundle)", "repository.mustache");

        YUM_REPOS_FILE_LIST_POPULATED::
            "" usebundle => scl_mustache_cf_data_2_file("$(this.bundle)",
                "$(template_file)", "$(yum.repos_dir)/$(repository_names).repo", "scl.yum_repository[$(repository_names)]" );

    reports:
        DEBUG_yum|DEBUG_yum_repository::
            "$(this.bundle): repository_file excluded from deletion: $(repository_exclude_files_str)";
            "$(this.bundle): $(template_2_destination_str)";
}

@if minimum_version(99.9)
# YUM

Source: [yum.cf](/services/yum.cf)

This bundle will configure the:
 * yum.conf -> scl_yum_conf class will set
 * repo files in /etc/yum.repos.d

These will be generated with the aid of the mustache templates with json data.
The templates/json files are located in:
 * templates/yum/
 * templates/yum/json
 * templates/yum_repository/
 * templates/yum_repository/json

## USAGE

The bundle can be run via:
 * `def.scl_services_enabled`
```
"vars": {
    "scl_services_enabled": [
            "...",
            "yum",
            "..."
    ]
}
```

The bundle will always read the [default.json](/templates/yum/json/default.json) file
and extra json file(s) can be specified via:
 * def.cf
```
vars:
    any::
        "yum_repository_json_files" slist => { "surfsara.json" };
```

The variable must be `yum_json_files` and with this setup 1 extra json file will be merged.

### DEBUG

If you want to debug these bundle set the `DEBUG_yum` class, eg:
 * `-DDEBUG_yum`

## def.cf/json

See what the default values are and which variables can be overriden
 * [yum default.json](/templates/yum/json/default.json)
 * [yum repository default.json](/templates/yum_repository/json/default.json)


With yum you can specify 2 different type of lists for external json data:
 1. yum_json_files --> yum.conf
 1. yum_repository_json_files --> yum repo files

Here are some examples how to use it.

add an extra repo:
 * def.cf
```
any::
    "yum_repository_files" slist => { "epel.json" };
```

 * def.json
```
"vars": {
    "yum_repository_files": [ "epel.json" ],
}
```

override yum conf setting:
 * def.cf
```
vars:
    "yum" data => parsejson( '{ "assumeyes":  "0"  }' );
```

 * def.json
```
"vars": {
    "yum": {
        "assumeyes":  "0"
    }
}
```
@endif
