bundle common munge()
{
    vars:
        any::
            "config_dir"        string => "/etc/munge";
            "munge_key_file"    string => "$(config_dir)/munge.key";

        any::
            "service_name"      string => "munge";
            "packages"          data  => parsejson('
                    {
                        "install": {
                            "munge" : "",
                        }
                    }
                ');

        systemd::
            "restart"          string => "$(paths.path[systemctl]) restart $(service_name)";
        !systemd::
            "restart"          string => "$(paths.path[service]) $(service_name) restart";
}

bundle agent munge_autorun()
{
    meta:
        "tags" slist => { "autorun", "template_munge" };

    methods:
        any::
            "" usebundle => sara_data_autorun("munge");
            "" usebundle => munge_install();
            "" usebundle => munge_config();
            "" usebundle => munge_daemons_check();
}

bundle agent munge_daemons_restart()
{
    commands:
        any::
            "$(munge.restart)";

    reports:
        any::
            "munged has been restarted";
}

bundle agent munge_daemons_check()
{
    processes:
        any::
            "/usr/sbin/munged"
                comment     => "Check if munged is running",
                process_count   => check_range("munge", "1", "1"),
                process_select  => sara_select_parent_process("1");

    methods:
        any::
            "" usebundle => munge_daemons_restart,
                ifvarclass => canonify("munge_out_of_range");

    reports:
        munge_out_of_range::
            "No munged process is running with PPID 1";

}

bundle agent munge_install()
{
    methods:
        "" usebundle => sara_service_packages("munge", "@(munge.packages)");
}

bundle agent munge_config()
{
    classes:
        any::
            "munge_copy_files_set" expression => isvariable("sara_data.munge[copy_files]"),
                comment => "check if we should copy any files for the munge bundle";

    methods:
        any::
            "" usebundle => munge_daemons_restart(),
                ifvarclass => or(
                    canonify("sara$(munge.munge_key_file)")
                );

        munge_copy_files_set::
            "" usebundle => sara_service_copy_files("munge");

    reports:
        !munge_copy_files_set::
            "$(this.bundle): No 'copy_files' data section found for 'munge' in def.cf/json";
}
@if minimum_version(99.9)

# Munge

Source: [munge.cf](/services/munge.cf)

This bundle copies a munge key to a node.
 * `/etc/munge/munge.key`

This bundle also makes sure that the proper owner (munge:munge) and permissions (400) are set.

The following json variables can be set in def.cf/json to invoke files bundles:                                                                                                                           
 * copy_files: See [files.cf](/masterfiles/lib/surfsara/files.cf)

## Usage

The bundle can be run via:
```json
"vars": {
    "sara_services_enabled": [
            "...",
            "munge",
            "..."
    ]
}
```

The bundle will aways read the [default.json](/templates/munge/json/default.json) file
and extra json file(s) can be specified via:
 * def.cf
```
vars:
    any::
        "munge_json_files" slist => { "lisa.json" }s
```

The variable must be `cron_json_files` and with this setup 1 extra json file will be  merged.

### Debug

To debug this bundle set the `DEBUG_munge` class:

- `-DDEBUG_munge`

## def.cf/json

See [default.json](/templates/munge/json/default.json) what the default values are and
which variables can be overriden.

### copy_files

With this variable is set it will copy the specified file (usually the munge key) to the
specified destination, example:
```json
"copy_files": [
    {
        "dest": "$(munge.munge_key_file)",
        "source": "cf_bundles_dir/munge/lisa/munge.key",
        "mog": [ "0400", "munge", "munge" ],
        "run_bundle": "munge_daemons_restart"
    }
]
```
Where `cf_bundles_dir` is a **cf-serverd shortcut**.
@endif
