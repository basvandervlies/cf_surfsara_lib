#
## ntp.cf @SURFsara
#
bundle common ntp {
    vars:
        any::
            "template_2_destination" data => parsejson('
                    {
                        "ntp.mustache" : "$(config_file)",
                        "ntp_default.mustache" : "$(ntp_default)",
                        "ntpdate_default.mustache" : "$(ntpdate_default)",
                    }
                ');

            "mode"              string => "0644";
            "group"             string => "root";
            "owner"             string => "root";
            "restart"           string => "$(paths.path[service]) $(service_name) restart";

        centos::
            "daemon_name"       string => "ntpd";
            "config_file"       string => "/etc/ntp.conf";
            "ntp_default"       string => "/etc/sysconfig/ntpd";
            "ntpdate_default"   string => "/etc/sysconfig/ntpdate";
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "ntp" : "",
                            "ntpdate" : ""
                        }
                    }
                ');
            "service_name"      string => "ntpd";

        debian::
            "daemon_name"       string => "ntpd";
            "config_file"       string => "/etc/ntp.conf";
            "ntp_default"       string => "/etc/default/ntp";
            "ntpdate_default"   string => "/etc/default/ntpdate";
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "ntp" : "",
                            "ntpdate" : ""
                        }
                    }
                ');
            "service_name"      string => "ntp";

        sles::
            "group"             string => "ntp";
            "daemon_name"       string => "ntpd";
            "config_file"       string => "/etc/ntp.conf";
            "ntp_default"       string => "/etc/sysconfig/ntp";
            "ntpdate_default"   string => "/etc/sysconfig/ntpdate";
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "ntp" : "",
                        }
                    }
                ');
            "service_name"      string => "ntpd";
}

bundle agent ntp_autorun()
{
    meta:
        "tags" slist => { "autorun", "template_ntp" };

    methods:
        any::
            "" usebundle => sara_data_autorun("ntp");
            "" usebundle => ntp_install();
            "" usebundle => ntp_surfsara_config();
            "" usebundle => ntp_daemons_check();

    reports:
        DEBUG_ntp|verbose_mode::
            "$(this.bundle): surfsara ntp template run";
}

bundle agent ntp_install()
{
    methods:
        "" usebundle => sara_service_packages("ntp", "@(ntp.packages)");
}

bundle agent ntp_surfsara_config()
{
    vars:
        "ntp_default_file_class" string => canonify("sara$(ntp.ntp_default)");
        "ntp_config_file_class" string => canonify("sara$(ntp.config_file)");


    classes:
        "NTP_RESTART" or => {
            "$(ntp_default_file_class)",
            "$(ntp_config_file_class)",
        };

    files:
        any::
            "$(ntp.config_file)"
                perms => mog("$(ntp.mode)", "$(ntp.owner)", "$(ntp.group)");
            "$(ntp.ntp_default)"
                perms => mog("$(ntp.mode)", "$(ntp.owner)", "$(ntp.group)");
            "$(ntp.ntpdate_default)"
                perms => mog("$(ntp.mode)", "$(ntp.owner)", "$(ntp.group)");

    methods:
        any::
            "" usebundle => sara_mustache_autorun("ntp");
        NTP_RESTART::
            "" usebundle => ntp_daemons_restart();


}

bundle agent ntp_daemons_check()
{
    processes:
       any::
            "$(ntp.daemon_name)"
                comment         => "Check if ntpd is running",
                process_count   => check_range("$(ntp.daemon_name)", "1", "1"),
                process_select  => sara_select_parent_process("1");

    methods:
        any::
            "ntp" usebundle => ntp_daemons_restart(),
                ifvarclass => canonify("$(ntp.daemon_name)_out_of_range");
}

bundle agent ntp_daemons_restart()
{
    commands:
        debian|centos::
            "$(ntp.restart)";

    reports:
        any::
            "ntp daemons has been restarted $(ntp.restart)";
}

@if minimum_version(99.9)
# ntp

Source: [ntp.cf](/services/ntp.cf)

This bundle will generate these files from mustache templates:
 * /etc/ntp.conf
 * /etc/default/ntpdate (debian), /etc/sysconfig/ntpdate (centos)
 * /etc/default/ntp (debian), /etc/sysconfig/ntpd (centos)

f one of the files is changed then the followong ''class'' will be set:
 * sara_etc_ntp_conf
 * sara_etc_default_ntp
 * sara_etc_default_ntpdate

These files will be generated with the aid of mustache templates with json data.
the templates are located in:
 * templates/ntp/
 * templates/ntp/json

## Usage

The bundle can be run via:
 *  `"" usebundle => cron_autorun();`
 * `def.sara_services_enabled` (prefered)
```json
"vars": {
    "sara_services_enabled": [
            "...",
            "ntp",
            "..."
    ]
}
```

The bundle will aways read the [default.json](/templates/cron/json/default.json) file
and extra json file(s) can be specified via:
 * def.cf
```
vars:
    any::
        "ntp_json_files" slist => { "debian.json" };
```

The variable must be ''ntp_json_files'' and with this setup 1 extra json file will be  merged.

### Debug

If you want to debug these bundle set the `DEBUG_ntp` class, eg:
 * `-DDEBUG_ntp

## def.cf/json

See [default.json](/templates/ntp/json/default.json) what the default values are and
which variables can be overriden.

Here are some examples how to use it:
 * specify ntp configuration in def.cf:
```
vars:
    "ntp_json_files" slist => { "debian.json" };
```
 * Set/Override the daemon options variable in ''def.json'':
```json
"ntp" : {
    "json_files": [ "debian.json" ],
    "daemon_options": "-g"
}
```
 * override server setting in def.cf
```
vars:
    "ntp" data => parsejson( '{ "server" : [ "ntp_test.surfsara.nl" ] }' );
```
@endif
