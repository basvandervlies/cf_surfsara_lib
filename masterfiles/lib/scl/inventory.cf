
#
##  SURFsara inventory.cf
#
@if minimum_version(99.9)
# inventory.cf

Source: [inventory.cf](/masterfiles/lib/scl/inventory.cf)

You can control which inventory modules must be run and with optional arguments by
specifying the following variable in:
 * def.json
```json
"scl_inventory_modules": [
        "scl/lscpu",
        "scl/dmidecode"
],
"scl/lscpu": {
        "args": "$(scl_inventory.cache_dir)"
},
"scl/dmidecode": {
    "args": "--output $(scl_inventory.cache_dir)/dmidecode.json --cf",
    "run_class": "debian",
    "run_bundle": "scl_dmidecode_example"
}
```

This statement determines which modules has to be run with optional arguments:
 * `args`: Arguments supplied to the module command (Optional)
 * `run_class`: Only run module if this class condition is met (Optional)
 * `run_bundle`: Run this bundle after a successful module execution (Optional)

The inventory bundle defines a directory variable for storing module data `scl_inventory.cache_dir`:
 * `/run/cf_inventory_cache`
 * can be overriden by `def.scl_inventory_cache_dir`

The module scripts must be located under `$(sys.workdir)/modules`. Only exit code '0' is considered
as promise kept all other exit codes are considered as promise failed. The class name is:
 * `canonify("scl_inventory_modules_<module_name>_failed")`

## lscpu

Is a wrapper script around the `lscpu` command. It converts the output to json and stores it in a json
file. If the file exists it will load the data and convert it to the json module data protocol. The
data can be accessed in cfengine:
 * `$(lscpu.data[Model_name])`
 * `"" usebundle => scl_show_data("lscpu", "data")`

Required argument: `"$(scl_inventory.cache_dir)"`

## dmidecode

Is a wrapper script around the `dmidecode` command. It converts the output to json and stores it in a json
file. If the file exists it will load the data and convert it to the json module data protocol. The
data can be accessed in cfengine:
 * `$(dmidecode.data[Base_Board_Information][0][Manufacturer])`
 * `"" usebundle => scl_show_data("dmidecode", "data")`

Required arguments: `"--output $(scl_inventory.cache_dir)/dmidecode.json --cf"`
@endif

bundle common scl_inventory
{
    vars:
        "modules" slist => { @(def.scl_inventory_modules) },
            if => and(
                    isvariable("def.scl_inventory_modules")
                );

        "modules" slist => {},
            if => and(
                    not(isvariable("def.scl_inventory_modules"))
                );

        "dir" string => "$(sys.workdir)/modules",
            comment => "CFengine modules directory location";

        "cache_dir" string => ifelse(
            isvariable( "def.scl_inventory_cache_dir"), $(def.scl_inventory_cache_dir),
            "/run/cf_inventory_cache");

    classes:
        "scl_inventory_modules_set" expression => isvariable("def.scl_inventory_modules");
}

bundle agent scl_inventory_modules
{
    meta:
        "tags" slist => { "scl_inventory" };

    classes:
        any::
            "cache_dir_exists" expression => isdir("$(scl_inventory.cache_dir)");

          "SCL_INVENTORY$(with)_ENABLED"
                comment => "set inventory enabled class for: $(scl_inventory.modules)",
                with => canonify(string_upcase(regex_replace("$(scl_inventory.modules)", "scl", "", "g"))),
                scope => "namespace";

    files:
        !cache_dir_exists::
            "$(scl_inventory.cache_dir)/."
                create => "true",
                perms  => mog("0700", "root", "root");

    methods:
        scl_inventory_modules_set::
             "" usebundle => scl_inventory_class_run("$(scl_inventory.modules)"),
                comment => "Run module with arg specified in entry";

             "" usebundle => scl_show_data("def", "scl_inventory_modules"),
                 if => "DEBUG|DEBUG_inventory|DEBUG_$(this.bundle)";

#        cache_dir_exists::
#            "" usebundle => scl_data_autorun("inventory"),
#                comment => "Maybe needed";

    reports:
        !scl_inventory_modules_set::
            "$(this.bundle) no inventory modules enabled, set 'def.scl_inventory_modules'"
                if => "DEBUG|DEBUG_inventory|DEBUG_$(this.bundle)";
}

bundle agent scl_inventory_class_run(module)
{
    vars:
        any::
            "run_class_var" slist => getvalues("def.$(module)[run_class]"),
                comment => "Only run service when the specified classes are set";

            "run_class_var_str" string => format("%S", "run_class_var"),
                if => "DEBUG|DEBUG_inventory|DEBUG_$(this.bundle)";

    classes:
        any::
            "run_class_set" expression => reglist("@(run_class_var)", ".+"),
                comment => "Inventory module  has specified classes. so check if there are met, if not set assume 'any' class";

            "run_class" expression => "$(run_class_var)",
                comment => "Run inventory module if run_class definitions are met",
                if => "run_class_set";

    methods:
        any::
            "" usebundle => scl_inventory_module_run("$(module)"),
                comment => "Run inventory module if class condition is met",
                if => or(
                    "run_class",
                    "!run_class_set"
                    );


             "" usebundle => scl_show_data("def", "$(module)"),
                 if => "DEBUG|DEBUG_inventory|DEBUG_$(this.bundle)";

    reports:
        any::
            "$(this.bundle): '$(module)' is enabled for `any' class"
                if => and(
                    "DEBUG|DEBUG_inventory|DEBUG_$(this.bundle)",
                    "!run_class_set"
                    );

            "$(this.bundle): '$(module)' is only enabled for class: `$(run_class_var_str)`"
                if => and(
                        "DEBUG|DEBUG_inventory|DEBUG_$(this.bundle)",
                        "run_class_set"
                        );
}

bundle agent scl_inventory_module_run(module)
{
    vars:
        any::
            "args" data => data_expand("def.$(module)[args]"),
                comment => "Try to Expand all CFengine variables",
                if => and(
                        isvariable("def.$(module)[args]")
                    );

            "args" string => "",
                comment => "No arguments specified",
                if => and(
                        not(isvariable("def.$(module)[args]"))
                    );

    classes:
        any::
            "args_class" expression => isvariable("def.$(module)[args]"),
                comment => "Run inventory module if run_class definitions are met";

    methods:
             "" usebundle => scl_inventory_run_bundle("$(module)"),
                comment => "Must we run a bundle after succesful module run",
                if => or(
                        canonify("scl_inventory_modules_$(module)_repaired"),
                        canonify("scl_inventory_modules_$(module)_kept")
                    );

    commands:
        any::
            "$(scl_inventory.dir)/$(module)"
                comment => "Run module with first argument cache dir and specified module args",
                args => "$(args)",
                classes => results("namespace", "scl_inventory_modules_$(module)"),
                module => "true";

    reports:
        any::
            "$(this.bundle) '$(module)' failed to run"
                if => canonify("scl_inventory_modules_$(module)_failed");
}

bundle agent scl_inventory_run_bundle(module)
{
    classes:
        any::
            "run_bundle" expression => isvariable("def.$(module)[run_bundle]"),
                comment => "Run bundle after module data is gathered";

    methods:
        run_bundle::
            "" usebundle => "$(def.$(module)[run_bundle])",
                comment => "run the bundle";
}

bundle agent scl_dmidecode_example()
{
    vars:
        "product_name" string => string_upcase("DMIDECOE_$(dmidecode.data[System_Information][0][Product_Name])");

    classes:
        "$(product_name)"
            scope => "namespace";

    reports:
        any::
            "$(this.bundle) Product_Name: '$(product_name)'"
                 if => "DEBUG|DEBUG_inventory|DEBUG_$(this.bundle)";

}
