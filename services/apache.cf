
bundle common apache()
{
    vars:

        any::
            "configdir" string => "$(scl.apache[configdir])";
            "document_root" string => "$(scl.apache[document_root])";
            "logdir" string => "$(scl.apache[logdir])";
            "modules_conf_dir" string => "$(configdir)/modules.d";
            "sites_dir" string => "$(configdir)/sites.d";
            "sites_root" string => "$(scl.apache[sites_root])";
            "remove_access_log" string => "/var/log/apache2/access_log.*";

            "performance_profile" string => "l_4c8m";

            "service_name" string => "apache2";
            "restart" string => "$(paths.path[systemctl]) restart $(service_name)";

        sles::
            "daemon_name" string => "httpd-worker";

            "packages"  data => parsejson('
                {
                    "install": {
                        "apache2": "",
                        "apache2-worker": "",
                        "apache2-utils": ""
                    },
                    "remove": {
                        "apache2-prefork": ""
                    }
                }
            ');

            "template_2_destination" data => parsejson('
                {
                    "suse_apache_sysconfig.mustache": "/etc/sysconfig/apache2",
                    "start_apache2.mustache": "/usr/sbin/start_apache2",
                    "httpd.conf.mustache": "$(configdir)/httpd.conf",
                    "ssl.conf.mustache": "$(configdir)/ssl.conf",
                    "server.conf.mustache": "$(configdir)/server.conf"
                }
            ');

        debian::
            "daemon_name" string => "apache2";

            "packages"  data => parsejson('
                {
                    "install": {
                        "apache2": ""
                    }
                }
            ');


            "template_2_destination" data => parsejson('
                {
                    "envvars.mustache": "/etc/apache2/envvars",
                    "httpd.conf.mustache": "$(configdir)/httpd.conf",
                    "ssl.conf.mustache": "$(configdir)/ssl.conf",
                    "server.conf.mustache": "$(configdir)/server.conf"
                }
            ');


}

bundle agent apache_install()
{
    methods:
        "" usebundle => scl_service_packages("apache", "@(apache.packages)");
}

bundle agent apache_config()
{
    vars:
        "modules" data => mergedata("scl.apache[modules_standard]", "scl.apache[modules_extra]");
        "names" slist => getindices("modules");
        "module_conf_files" slist => maplist("$(this).conf", @(names));

        "apache_dirs_needed" slist => {
            "$(apache.configdir)/local.d",
            "$(apache.modules_conf_dir)",
            "$(apache.sites_dir)",
            "$(apache.document_root)",
            "$(apache.sites_root)"
        };

        "site_files" slist => getvalues(mergedata("scl.apache[sites]", "scl.apache[sites_generated]")),
            comment => "Make a list of site files used for this apache server";

    classes:
        "apache_config_dir_exists" expression => isdir("$(scl.apache[configdir])");

        "copy_dirs_set" expression => isvariable("scl.apache[copy_dirs]"),
            comment => "Must we copy directories";

        "apache_restart"
            if => or(
                "APACHE_MODULES_repaired",
                "APACHE_SITES_repaired",
                "scl_opt_apache_ssl_conf",
                canonify("scl$(apache.configdir)/httpd.conf"),
                canonify("scl$(apache.configdir)/server.conf"),
                canonify("scl$(apache.configdir)/ssl.conf"),
                canonify("scl/etc/apache2/envvars"),
                canonify("scl/etc/sysconfig/apache2")
                );

    files:
        any::
            "$(apache.configdir)/."
                perms => mog("755", "$(scl.apache[user])", "$(scl.apache[group])"),
                create => "true",
                move_obstructions => "true",
                classes => results("namespace", "APACHE_CONFIGDIR"),
                if => not("apache_config_dir_exists");

            "$(apache_dirs_needed)/."
                perms => mog("755", "$(scl.apache[user])", "$(scl.apache[group])"),
                create => "true",
                move_obstructions => "true",
                classes => results("namespace", "$(apache_dirs_needed)"),
                if => "apache_config_dir_exists";

            "$(apache.modules_conf_dir)/$(names).conf"
                comment => "Only copy configuration files if defined",
                perms => mog("644", "$(scl.apache[user])", "$(scl.apache[group])"),
                copy_from => scl_sync_no_perms_cp("$(modules[$(names)])", "hash"),
                move_obstructions => "true",
                classes => results("namespace", "APACHE_MODULES"),
                if => and(
                    "apache_config_dir_exists",
                    not(strcmp("$(modules[$(names)])", ""))
                    );

            "$(apache.sites_dir)/$(scl.apache[sites])"
                perms => mog("644", "$(scl.apache[user])", "$(scl.apache[group])"),
                copy_from => scl_sync_no_perms_cp("data/apache/sites/$(scl.apache[sites])", "hash"),
                move_obstructions => "true",
                classes => results("namespace", "APACHE_SITES"),
                if => "apache_config_dir_exists";

            "$(apache.modules_conf_dir)"
                comment => "delete module config file(s) not maintained by CFengine",
                delete => scl_tidyfiles,
                file_select => ex_list("@(module_conf_files)"),
                depth_search => recurse("inf");

            "$(apache.sites_dir)"
                comment => "delete site config file(s) not maintained by CFengine",
                delete => scl_tidyfiles,
                file_select => ex_list("@(site_files)"),
                depth_search => recurse("inf");

            "$(apache.remove_access_log)"
                comment => "remove access_log file that was created by bug in mustache file",
                delete => tidy;

    methods:
        any::
            "" usebundle => scl_mustache_autorun("apache"),
                if => or(
                    "apache_config_dir_exists",
                    "APACHE_CONFIGDIR_repaired"
                );

        copy_dirs_set::
            "" usebundle => scl_service_copy_dirs("apache");

    commands:
        "$(apache.restart)"
            if => "apache_restart";

    reports:
        any::
            "$(this.bundle) modules: '$(names)':'$(modules[$(names)])'"
                if => "DEBUG|DEBUG_apache|DEBUG_$(this.bundle)";

            "$(this.bundle) site: '$(site_files)'"
                if => "DEBUG|DEBUG_apache|DEBUG_$(this.bundle)";
}

bundle agent apache_daemon_check()
{
    processes:
        "$(apache.daemon_name)"
            comment => "Check if Grafana is running",
            process_count   => check_range("$(apache.daemon_name)", "1", "1"),
            process_select  => scl_select_parent_process("1");

    commands:
        "$(apache.restart)"
            if => canonify("$(apache.daemon_name)_out_of_range");
}

bundle agent apache_autorun()
{
    meta:
        "tags" slist => { "service_apache", "template_apache" };

    methods:
        debian|sles::
            "" usebundle => apache_install();
            "" usebundle => apache_config();
            "" usebundle => apache_daemon_check();
}

@if minimum_version(99.9)
# apache.cf

Source[apache.cf](/services/apache.cf)

This bundle will be used to:
 * Configure Apache in /opt/apache so when updating/upgrading Apache there is no conflict with the distribution setup
 * Simplified setup so it is easier to use with CFEngine
 * Still free formatting of Apache code for modules and sites
 * Only configures Apache, for Python wsgi and/or PHP a separate service needs to be created
 * Clean sites.d directory if thee are files that are not specified  with `sites`or `sites_generated`
 * Clean modules.d directory if thee are files that are not specified  with `modules_standard`or `modules_extra`

Some site files may be generated om the machine like we do for JupyterHUB. We generate this file in the
`apache.sites_dir` variable. To prevent these file from deletion we need to specify this  file(s) in the following
json variable:
 * `sites_generated`

Some modules require configuration files. This specified per module and the default can be overriden with json
variable `modules_extra`, eg:
```json
modules_extra: {
        jk: data/apache/cua/jk.conf,
        proxy_fcgi: data/apache/cua/proxy_fcgi.conf
},
```

Please note that this bundle has only been tested/designed for Debian Stretch or Buster. And therefor a specific
Debian Apache file envvars wil be written to `/etc/apache2/envvars`. This is needed to make sure Apache daemon
uses the `/opt/apache/httpd.conf` instead of the default configuration file.

The following json variables can be set in def.cf/json to  invoke files bundles:
 * copy_dirs: See [files.cf](/masterfiles/lib/scl/files.cf)

TODO:
 - Desining separate services for Python wsgi and PHP
 - A construction need to be design for easy switching between "Performance" profiles based on a value of the machine

## Usage

The bundle can be run via:
 *  `"" usebundle => apache_autorun();`
 * `def.scl_services_enabled` (prefered)
```json
"vars": {
    "scl_services_enabled": [
            "...",
            "apache",
            "..."
    ]
}
```

The bundle will aways read the [default.json](/templates/apache/json/default.json) file
and extra json file(s) can be specified via:
 * def.cf
```
vars:
    any::
        "apache" slist => { "cua.json" };
```
@endif
