#
## files.cf @SURFsara
#
## https://tracker.mender.io/browse/CFE-2434 bug in passing data containers with vars
#
@if minimum_version(99.9)
# files.cf

Source: [files.cf](/masterfiles/lib/scl/files.cf)

Bundles:
 1. agent scl_make_cron_file
 1. agent scl_service_copy_dirs
 1. agent scl_service_copy_files
 1. agent scl_service_install_tarballs
 1. agent scl_service_rotate_file
 1. edit_line edit_line scl_var_to_file

## agent scl_service_copy_dirs(bundle_name)

This bundle will read the json attribute `copy_dirs` from the specified `bundle_name`. The following json
attribute can be specified:
 * compare: which mode must we use to check the difference, default: digest
 * dest: destination directory
 * exclude_dirs:  exclude this dirs from copying, default: [ ".git", ".svn" ]
 * mog: mode/owner/group  of all files/directories, default not set
 * preserve: preserve same mode as source directory, default: false
 * purge: exact copy of the source directory, default: false
 * run_bundle: The name of the bundle to run when something is repaired, default not set.
 * source: source directory
 * type_check:  Check if destination and source are of the same type, default: false

The  copy attributes can be overriden or specified  by json data, eg:
```json
"slurm": {
    "copy_dirs": [
        {
            "dest": "/opt/slurm/scripts",
            "exclude_dirs": [ ".git", ".svn" ],
            "mog": [ "0700", "root", "root" ],
            "purge": "true",
            "source": "data/slurm/scripts"
        }
    ]
}
```

When a file has been changed in the `copy_dirs` statement the following classes are set:
 * `canonify("$(bundle_name)_copy_dirs$(dest)")` --> eg: `slurm_copy_dirs_opt_slurm_scripts_repaired`
 * `$(bundle_name)_copy_dirs_repaired` --> eg: `slurm_copy_dirs_repaired`


## agent scl_service_copy_files(bundle_name)

This bundle will read the json attribute `copy_files` from the specified `bundle_name`. The following json
attribute can be specified:
 * dest: destination
 * mog: mode/owner/group of the file
 * run_bundle: The name of the bundle to run when something is repaired, default not set.
 * secure_cp from mpf is used to copy the files
 * source: source

The `copy_files` can specified by json data eg:
```json
"slurm": {
    "copy_files": [
        {
            "dest": "/opt/slurm/etc//job_submit.lua",
            "source": "data/slurm/lisa/job_submit.lua",
            "mog": ["0644", "slurm", "slurm"]
        }
    ]
}
```

When a file has been changed in the `copy_files` statement the following classes are set:
 * `canonify("$(bundle_name)_copy_files$(dest)")` --> eg: `slurm_copy_files_opt_slurm_etc_job_submit_lua_repaired`
 * `$(bundle_name)_copy_files_repaired` --> eg: `slurm_copy_files_repaired`

## agent scl_service_install_tarballs(bundle_name)

This bundle will read the json attribute `install_tarballs` from the specified `bundle_name`. The following json
attribute can be specified:
 * check_dir:  Check if the directory exists. If not extract the tarball
 * dest:  destination
 * extract:  which `cmd` to use to extract the tarball and `in_dir` which dir to extract
 * mog: mode/owner/group of the file
 * secure_cp from mpf is used to copy the files
 * source: source

Here is an example for slurm (json file):
```#json
install_tarballs: [
    {
    check_dir: $(slurm.software_dir)/19.05.5,
    dest: $(slurm.tarball_dir)/slurm-19.05.5.tar.gz,
    extract: {
        cmd: $(paths.path[tar]) --extract --gzip --file,
        in_dir: $(slurm.software_dir)
    },
    mog: [ 0644, root, root],
    source: data/slurm/tarballs/$(sys.flavor)/slurm-19.05.5.tar.gz
    }
],
dir: /opt/slurm,
current_version: 19.05.5,,
software_dir: $(scl.slurm[dir])/sw,
tarball_dir: $(scl.slurm[dir])/tarballs
```

When a file has been changed in the `install_dirs` statement the following classes are set:
 * `canonify("$(bundle_name)_install_tarballs$(dest)")` --> eg: `slurm_install_tarballs_opt_slurm_tarballs_slurm_19_06_5_tar_gz_repaired`
 * `$(bundle_name)_install_tarballs_repaired` --> eg: `slurm_install_tarballs_repaired`

@endif

body copy_from scl_cp_dir(bundle_name, var, server)
{
    servers     => { "$(server)" };
    compare     => "$($(bundle_name).$(var)[compare])";
    source      => "$($(bundle_name).$(var)[source])";
    purge       => "$($(bundle_name).$(var)[purge])";
    preserve    => "$($(bundle_name).$(var)[preserve])";
    type_check  => "$($(bundle_name).$(var)[type_check])";
}

body copy_from scl_sync_no_perms_cp(from,compare)
{
    servers  => { $(sys.policy_hub) };
    source      => "$(from)";
    purge       => "true";
    preserve    => "false";

!windows::
    compare     => "$(compare)";

windows::
    ## digest/hash is not working, bug? BvdV 6 Aug 2014
    #
    compare => "mtime";
}

body copy_from scl_template_local_dcp(from)
{
    compare => "digest";
    source => "$(from)";
    copylink_patterns => { ".*" };
}

body delete scl_tidyfiles
{
    dirlinks 	=> "delete";
    rmdirs 		=> "false";
}

body depth_search scl_remove_deadlinks(recurse)
{
    rmdeadlinks     => "true";
    depth           => "$(recurse)";
}

body file_select scl_symbolic_link()
{
    file_types  => { "symlink" };
    file_result => "file_types";
}

body link_from scl_relative_ln_s(x)
{
    link_type => "relative";
    source => "$(x)";
}

body link_from scl_linkchildren(directory)
{
    source                  => "$(directory)";
    link_type               => "symlink";
    when_no_source          => "delete";
    link_children           => "true";
    when_linking_children   => "override_file";
}


bundle agent scl_cp_dir_default
{
    vars:
       any::
            "attributes" data => parsejson('{
                "compare": "digest",
                "preserve": "false",
                "purge": "false",
                "sync": "false",
                "type_check": "false"
                }');
}

@if minimum_version(99.9)
## agent scl_make_cron_file(name. data)

This bundle install system cronjob in `/etc/cron.d`. The bundle is called with:
 * scl_make_cron_file(name, data)

Where:
 * name: is the name of the cronjob file
 * data: Json data. eg: 2 minute cronjob
```json
{
    "minute": "*/2",
    "hour": "*",
    "day_of_month": "*",
    "month": "*",
    "day_of_week": "*",
    "user": "root",
    "command": "/bin/ls"
}
```
@endif
bundle agent scl_make_cron_file(name, data)
{
    vars:
        any::
            "cron_dir" string => "/etc/cron.d";
            "header" string => "## Maintained by CFengine$(const.n)#$(const.n)";

            "template" string => "$(header){{{minute}}} {{{hour}}} {{{day_of_month}}} {{{month}}} {{{day_of_week}}} {{{user}}} {{{command}}}";

            "job_str" string => string_mustache( "$(template)", "@(data)");

    classes:
        any::
            "CRON_VIXIE" expression => isdir("$(cron_dir)");

    files:
@if minimum_version(3.12)
        CRON_VIXIE::
            "$(cron_dir)/$(name)"
                comment => "Vixie cron: one command per file",
                create => "true",
                edit_template_string   => "$(template)$(const.n)",
                template_method => "inline_mustache",
                template_data => "@(data)",
                classes => results("namespace", "scl_make_cron_file_$(name)");
@endif

    methods:
        CRON_VIXIE.(cfengine_3_10|cfengine_3_7)::
            "" usebundle => file_make("$(cron_dir)/$(name)", "$(job_str)"),
                classes => results("namespace", "scl_make_cron_file_$(name)");

    reports:
        any::
            "'$(name)' is installed in $(cron_dir): $(const.n)$(job_str)"
                if => "DEBUG|DEBUG_$(this.bundle)";

        !CRON_VIXIE::
            "No Vixie cron software installed";
}


@if minimum_version(99.9)

## agent scl_service_rotate_files(bundle_name, data)

This bundle rotates files. The bundle is called with:
 * scl_service_rotate_files(bundle_name, data)

Where:
 * bundle_name: is the name of the bundle that needs rotate
 * data: Json data. eg: 
     rotate /var/log/jadi.log with 7 entries at Hr09.Min00_05
```json
{

    "rotate_files" data => parsejson('
        [
             {
                  "log_file": "/var/log/jadi.log",
                  "number_of_backups" : "7",
                  "run_class" : [ "Hr09.Min00_05" ]
             }
       ]
}
```
@endif
bundle agent scl_service_rotate_files(bundle_name, data)
{
    vars:
       json_rotate_files_specified::
            "rotate_files_data" data => mergedata("{}", "scl.$(bundle_name)[rotate_files]");
            "debug_str"       string => "Use 'def.json' service rotate_files definition";

       !json_rotate_files_specified::
            "rotate_files_data" data => mergedata("{}", "data");
            "debug_str"       string => "Use bundle service rotate_files definition";

       any::
            "index" slist => getindices("rotate_files_data");

            "run_class_var_$(index)" slist => getvalues("rotate_files_data[$(index)][run_class]"),
                handle => "$(this.bundle):$(bundle_name):$(index)",
                comment => "Only run package action if this class is true";

            "run_class_var_str_$(index)" string => ifelse(
                    "run_class_set_$(index)", format("%s", "$(run_class_var_$(index))"),
                    "any"
                ),
                handle => "$(this.bundle):$(bundle_name):$(index)",
                if => "DEBUG|DEBUG_$(bundle_name)|DEBUG_$(this.bundle)";

classes:
    any::
        "json_rotate_files_specified" expression => isvariable("scl.$(bundle_name)[rotate_files]"),
            comment => "Do we override the bundle services rotate_files  with def.json settings";

        "run_class_set_$(index)" expression => classify("$(rotate_files_data[$(index)][run_class])"),
            comment => "if not set assume 'any' class";

files:
    any::
        "$(rotate_files_data[$(index)][log_file])"
            comment => "rotate_files: $(rotate_files_data[$(index)][log_file]), number of backups: $(rotate_files_data[$(index)][number_of_backups])",
            rename  => rotate("$(rotate_files_data[$(index)][number_of_backups])"),
            if => "run_class_set_$(index)";

        "$(rotate_files_data[$(index)][log_file]).1"
            comment     => "rotate_files: gzip $(rotate_files_data[$(index)][log_file]).1",
            transformer => "$(paths.path[gzip]) $(this.promiser)",
            if => "run_class_set_$(index)";

reports:
    any::
        "$(this.bundle):$(bundle_name): index: $(index) file: $(rotate_files_data[$(index)][log_file]) #rotates: $(rotate_files_data[$(index)][number_of_backups]) class: $(rotate_files_data[$(index)][run_class]) run_class_var_str: $(run_class_var_str_$(index))"
            if => "DEBUG|DEBUG_$(bundle_name)|DEBUG_$(this.bundle)";
}

bundle agent scl_service_copy_dirs(bundle_name)
{
vars:
    any::
        "index" slist => getindices("scl.$(bundle_name)[copy_dirs]");

        "cp_attr_$(index)" data => mergedata("scl_cp_dir_default.attributes", "scl.$(bundle_name)[copy_dirs][$(index)]"),
            comment => "Merge each definition the copy default attributes";

        "exclude_dir_$(index)" slist => { ".git", ".svn" },
            comment => "Default exclude directories settings for copy_dirs",
            if => and(
                not(isvariable("scl.$(bundle_name)[copy_dirs][$(index)][exclude_dirs]"))
            );

        "exclude_dir_$(index)" data => mergedata("scl.$(bundle_name)[copy_dirs][$(index)][exclude_dirs]"),
            comment => "Exclude directory settings from json data",
            if => and(
                isvariable("scl.$(bundle_name)[copy_dirs][$(index)][exclude_dirs]")
            );

    cfengine_3_7|cfengine_3_10::
        "debug_str" string => format("%S", "scl.$(bundle_name)[copy_dirs]"),
            comment => "Old debug method",
            if => "DEBUG|DEBUG_$(bundle_name)|DEBUG_$(this.bundle)";

classes:
    any::
        "$(bundle_name)_copy_dirs_$(index)_run_bundle" expression => isvariable("scl.$(bundle_name)[copy_dirs][$(index)][run_bundle]"),
            comment => "Must we run a bundle when a directory is changed";

        "$(bundle_name)_copy_dirs_$(index)_mog_class" expression => isvariable("scl.$(bundle_name)[copy_dirs][$(index)][mog]"),
            comment => "Must we set directory permission and doit recurse";

        "$(bundle_name)_copy_dirs_repaired"
            scope => "namespace",
            if => or(
                canonify("$(bundle_name)_copy_dirs$(scl.$(bundle_name)[copy_dirs][$(index)][dest])_repaired")
                );

files:
    any::
        ## Can not use $(this.bundle) in copy_from body, bug?
        "$(scl.$(bundle_name)[copy_dirs][$(index)][dest])"
            comment => "Copy bundle dirs and set class if there is a change",
            copy_from => scl_cp_dir("scl_service_copy_dirs", "cp_attr_$(index)", "$(sys.policy_hub)"),
            depth_search => recurse_ignore("inf", "@(exclude_dir_$(index))" ),
            classes => results("namespace", "$(bundle_name)_copy_dirs$(scl.$(bundle_name)[copy_dirs][$(index)][dest])"),
            if => and(
                not(canonify("$(bundle_name)_copy_dirs$(scl.$(bundle_name)[copy_dirs][$(index)][dest])_kept"))
            );

        "$(scl.$(bundle_name)[copy_dirs][$(index)][dest])"
            comment => "Set permission on all files/dirs if requested",
            perms => mog(
                "$(scl.$(bundle_name)[copy_dirs][$(index)][mog][0])",
                "$(scl.$(bundle_name)[copy_dirs][$(index)][mog][1])",
                "$(scl.$(bundle_name)[copy_dirs][$(index)][mog][2])"
            ),
            depth_search => recurse("inf"),
            if => and(
                canonify("$(bundle_name)_copy_dirs_$(index)_mog_class")
            );

methods:
    any::
        "" usebundle => "$(scl.$(bundle_name)[copy_dirs][$(index)][run_bundle])",
            if => and(
                canonify("$(bundle_name)_copy_dirs$(scl.$(bundle_name)[copy_dirs][$(index)][dest])_repaired"),
                canonify("$(bundle_name)_copy_dirs_$(index)_run_bundle")
                );

@if minimum_version(3.11)
        "" usebundle => scl_show_data("scl", "$(bundle_name)[copy_dirs][$(index)]"),
            if => "DEBGU|DEBUG_$(bundle_name)|DEBUG_$(this.bundle)";
        "" usebundle => scl_show_data("$(this.bundle)", "exclude_dir_$(index)"),
            if => "DEBGU|DEBUG_$(bundle_name)|DEBUG_$(this.bundle)";
        "" usebundle => scl_show_data("$(this.bundle)", "cp_attr_$(index)"),
            if => "DEBGU|DEBUG_$(bundle_name)|DEBUG_$(this.bundle)";
@endif

reports:
    cfengine_3_7|cfengine_3_10::
        "$(this.bundle):$(bundle_name):$(debug_str)"
            if => "DEBUG|DEBUG_$(bundle_name)|DEBUG_$(this.bundle)";
}


bundle agent scl_service_copy_files(bundle_name)
{
    methods:
        any::
            "" usebundle => scl_service_copy_base("$(bundle_name)", "copy_files");
}

bundle agent scl_service_install_tarballs(bundle_name)
{
    vars:
        "index" slist => getindices("scl.$(bundle_name)[install_tarballs]");

    classes:
        "check_dir_$(index)" expression => isdir("$(scl.$(bundle_name)[install_tarballs][$(index)][check_dir])"),
            comment => "Check if tarball is extracted";

        "check_tarball_dir" expression => isdir("$(scl.$(bundle_name)[tarball_dir])"),
            comment => "Check if target directory exists";

    files:
        !check_tarball_dir::
            "$(scl.$(bundle_name)[tarball_dir])/."
                create => "true";

    methods:
        any::
            "" usebundle => scl_service_copy_base("$(bundle_name)", "install_tarballs");

    commands:
        any::
                    #canonify("$(bundle_name)_install_tarballs_$(index)_repaired"),
            "$(scl.$(bundle_name)[install_tarballs][$(index)][extract][cmd])  $(scl.$(bundle_name)[install_tarballs][$(index)][dest])"
                comment => "extract tarball with specified command in a directory",
                contain => in_dir("$(scl.$(bundle_name)[install_tarballs][$(index)][extract][in_dir])"),
                if => or(
                    canonify("$(bundle_name)_install_tarballs$(scl.$(bundle_name)[install_tarballs][$(index)][dest])"),
                    "!check_dir_$(index)"
                    );

    reports:
        any::
            "$(this.bundle):
                $(scl.$(bundle_name)[install_tarballs][$(index)][extract][cmd]) $(scl.$(bundle_name)[install_tarballs][$(index)][dest])
                in directory: $(scl.$(bundle_name)[install_tarballs][$(index)][extract][in_dir])
                from directory: $(scl.$(bundle_name)[tarball_dir])"
                if => or(
                    "DEBUG|DEBUG_$(bundle_name)|DEBUG_$(this.bundle)"
                    );

            "$(this.bundle): Software directory does not exists: $(scl.$(bundle_name)[install_tarballs][$(index)][check_dir]) force reinstall"
                if => and(
                    "DEBUG|DEBUG_$(bundle_name)|DEBUG_$(this.bundle)",
                    "!check_dir_$(index)"
                    );
}

bundle agent scl_service_copy_base(bundle_name, section)
{
vars:
    any::
        "index" slist => getindices("scl.$(bundle_name)[$(section)]");

classes:
    any::
        "$(bundle_name)_$(section)_$(index)_run_bundle" expression => isvariable("scl.$(bundle_name)[$(section)][$(index)][run_bundle]"),
            comment => "Must we run a bundle when a file is copied";

        "$(bundle_name)_$(section)_repaired"
            scope => "namespace",
            if => or(
                canonify("$(bundle_name)_$(section)$(scl.$(bundle_name)[$(section)][$(index)][dest])_repaired")
                );


files:
    any::
        "$(scl.$(bundle_name)[$(section)][$(index)][dest])"
            comment => "Copy bundle files and set class if its get copied",
            copy_from => secure_cp("$(scl.$(bundle_name)[$(section)][$(index)][source])", "$(sys.policy_hub)"),
            #classes => results("namespace", "$(scl.$(bundle_name)[$(section)][$(index)][dest])");
            classes => results("namespace", "$(bundle_name)_$(section)$(scl.$(bundle_name)[$(section)][$(index)][dest])");

        "$(scl.$(bundle_name)[$(section)][$(index)][dest])"
            comment => "Check permission",
            perms => mog(
                "$(scl.$(bundle_name)[$(section)][$(index)][mog][0])",
                "$(scl.$(bundle_name)[$(section)][$(index)][mog][1])",
                "$(scl.$(bundle_name)[$(section)][$(index)][mog][2])"
            );

methods:
    any::
                #canonify("$(scl.$(bundle_name)[$(section)][$(index)][dest])"),
        "" usebundle => "$(scl.$(bundle_name)[$(section)][$(index)][run_bundle])",
            if => and(
                canonify("$(bundle_name)_$(section)$(scl.$(bundle_name)[$(section)][$(index)][dest])"),
                canonify("$(bundle_name)_$(section)_$(index)_run_bundle")
                );

@if minimum_version(3.11)
        "" usebundle => scl_show_data("scl", "$(bundle_name)[$(section)][$(index)]"),
            if => "DEBGU|DEBUG_$(bundle_name)|DEBUG_$(this.bundle)";
@endif

reports:
    any::
        "$(this.bundle): has been called to use json data: 'scl.$(bundle_name)[$(section)]'"
            if => "DEBGU|DEBUG_$(bundle_name)|DEBUG_$(this.bundle)";
}


@if minimum_version(99.9)
## edit_line scl_var_to_file

Save an 'variable' to a file.  The file will be emptied id the 'variable' is not
present in the file and then added.

@endif
bundle edit_line scl_var_to_file( line )
{

        classes:
                "infile" expression => regline( "^($(line))$", "$(edit.filename)");

        delete_lines:
                !infile::
                        ".*";

        insert_lines:
                !infile::
                       "$(line)";
}
