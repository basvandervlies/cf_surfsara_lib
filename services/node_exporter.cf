#
## node_exporter.cf @SURFsara
#
bundle common node_exporter()
{
    vars:
        any::
            "service_name" string => "node_exporter";
            "systemd_file" string => "/etc/systemd/system/node_exporter.service";
            "initd_file"   string => "/etc/init.d/$(service_name)";
            "default_file" string => "/etc/default/node_exporter";

        systemd::
            "template_2_destination" data => parsejson('
                {
                    "node_exporter.default.mustache": "$(default_file)",
                    "systemd.mustache": "$(systemd_file)"
                }
            ');

            "reload" string => "$(paths.path[systemctl]) reload $(service_name)";
            "restart" string => "$(paths.path[systemctl]) restart $(service_name)";

        !systemd::
            "template_2_destination" data => parsejson('
                {
                    "node_exporter.default.mustache": "$(default_file)"
                    "initd.mustache": "$(initd_file)"
                }
            ');
            "reload"  string => "$(initd_file) reload";
            "restart" string => "$(initd_file) restart";

}

bundle agent node_exporter_install()
{
    classes:
        "node_exporter_copy_dirs_set" expression => isvariable("sara_data.node_exporter[copy_dirs]");

    methods:
        node_exporter_copy_dirs_set::
            "" usebundle => sara_service_copy_dirs("node_exporter");
}

bundle agent node_exporter_config()
{
    classes:
        "node_exporter_cron" expression => isvariable("sara_data.node_exporter[cron_job]");

    services:
        "$(node_exporter.service_name)"
            service_policy => "start";

    methods:
        any::
            "" usebundle => sara_mustache_autorun("node_exporter");
        node_exporter_cron::
            "" usebundle => sara_make_cron_file("sys2prometheus","@(sara_data.node_exporter[cron_job])");

    commands:
        systemd::
            "$(node_exporter.restart)"
                ifvarclass => or(
                    canonify("sara$(node_exporter.systemd_file)"),
                    canonify("sara$(node_exporter.default_file)")
                );

        !systemd::
            "$(node_exporter.restart)"
                ifvarclass => or(
                    canonify("sara$(node_exporter.initd_file)"),
                    canonify("sara$(node_exporter.default_file)")
                );
}

bundle agent node_exporter_restart
{
    commands:
        "$(node_exporter.restart)";
}

bundle agent node_exporter_daemon_check()
{
    vars:
        "name" string => "$(sara_data.node_exporter[dir])/$(node_exporter.service_name)";

    processes:
        "$(name)"
            comment => "Check if Prometheus is running",
            process_count   => check_range("$(name)", "1", "1"),
            process_select  => sara_select_parent_process("1");

    methods:
        any::
            "" usebundle => node_exporter_restart,
                ifvarclass => canonify("$(name)_out_of_range");

    reports:
        "$(this.bundle): check $(name)"
           ifvarclass => "DEBUG|DEBUG_node_exporter|DEBUG_$(this.bundle)";
}

bundle agent node_exporter_autorun()
{
    meta:
        "tags" slist => { "autorun", "template_node_exporter" };

    methods:
        "" usebundle => sara_data_autorun("node_exporter");
        "" usebundle => node_exporter_install();
        "" usebundle => node_exporter_config();
        "" usebundle => node_exporter_daemon_check();
}
@if minimum_version(99.9)

# node_exporter

Source: [node_exporter.cf](/services/node_exporter.cf)

This bundle will generate these/this file(s) from mustache templates:

 * /etc/default/node_exporter
 * /etc/systemd/system/node_exporter.service (systemd system)
 * /etc/init.d/node_exporter (non systemd system)

If one of the files is changed then the following ""class"" will be set:
 * sara_etc_default_node_exporter
 * sara_etc_systemd_system_node_exporter_service
 * sara_etc_init_d_node_exporter

These templates are located in:
 * templates/node_exporter
 * templates/node_exporter/json

## Usage

The bundle can be run via:
 *  `"" usebundle => node_exporter_autorun();`
 * `def.sara_services_enabled` (prefered)
```json
"vars": {
    "sara_services_enabled": [
            "...",
            "node_exporter",
            "..."
    ]
}
```

The bundle will aways read the [default.json](/templates/node_exporter/json/default.json) file
and extra json file(s) can be specified via:
 * def.cf
```
vars:
    any::
        "node_exporter_json_files" slist => { "sara.json" };
```

The variable must be `node_exporter_json_files` and with this setup 1 extra json file will be  merged.

### DEBUG

if you want to debug this bundle set the `DEBUG_node_exporter` class, eg:
 * `DDEBUG_node_exporter`

## def.cf/json

See [default.json](/templates/node_exporter/json/default.json) what the default values are and
which variables can be overriden.


### copy_dirs

When this variabele is set it will copy the directoy to the specified destination and can run a bundle
if there are changes, eg:
```json
"copy_dirs": [
    {
        "dest": "$(sara_data.node_exporter[dir])",
        "exclude_dirs": [ ".git", ".svn" ],
        "purge": "true",
        "run_bundle": "node_exporter_restart",
        "source": "cf_bundles_dir/prometheus_exporters/node_exporter-0.15.2"
    }
]
```

=== cron_jon ===

When this variabele is set it will create a cron file in  `/etc/cron.d` with name `sys2prometheus`, eg:
```
#!json
{
    "cron_job": {
        "minute": "*/4",
        "hour": "*",
        "day_of_month": "*",
        "month": "*",
        "day_of_week": "*",
        "user": "root",
        "command": "/usr/sara/sbin/sys2prometheus 2>/dev/null"
    }
}
```
@endif
