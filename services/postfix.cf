#
## postfix.cf @SURFsara
#
bundle common postfix() {
    vars:
        debian::
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "bsd-mailx" : "",
                            "postfix" : "",
                            "postfix-ldap" : ""
                        },
                        "purge": {
                            "heirloom-mailx": ""
                        }
                    }
                ');
            "service_name"      string => "postfix";

        debian_6|debian_7|debian_8::
            "daemon_name"       string => "/usr/lib/postfix/master";
        debian_9|debian_10::
            "daemon_name"       string => "/usr/lib/postfix/sbin/master";

        centos::
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "bsd-mailx" : "",
                            "postfix" : ""
                        },
                        "remove": {
                            "heirloom-mailx": ""
                        }
                    }
                ');
            "service_name"      string => "postfix";
            "daemon_name"       string => "/usr/libexec/postfix/master";

        sles::
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "mailx" : "",
                            "postfix" : ""
                        }
                    }
                ');
            "service_name"      string => "postfix";
            "daemon_name"       string => "/usr/lib/postfix/bin/master";

        any::
            "newaliases"        string => "/usr/bin/newaliases";
            "postmap_cmd"       string => "/usr/sbin/postmap";
            "config_dir"        string => "/etc/postfix/";
            "setpermissions"    string => "/usr/sbin/postfix set-permissions";

            ## Mustache templates
            "template_2_destination" data => parsejson('
                {
                    "aliases.mustache" : "/etc/aliases",
                    "main.cf.mustache" : "/etc/postfix/main.cf",
                    "master.cf.mustache" : "/etc/postfix/master.cf",
                    "dynamicmaps.cf.mustache" : "/etc/postfix/dynamicmaps.cf",
                    "recipient_canonical.mustache" : "/etc/postfix/recipient_canonical",
                    "header_checks.mustache": "/etc/postfix/header_checks",
                    "transport.mustache": "/etc/postfix/transport"
                }
            ');

        systemd::
            "postfix_restart" string => "$(paths.path[systemctl]) restart $(service_name)";
            "postfix_reload"  string => "$(paths.path[systemctl]) reload $(service_name)";

        !systemd::
            "postfix_restart" string => "$(paths.path[service]) $(service_name) restart";
            "postfix_reload" string => "$(paths.path[service]) $(service_name) reload";
}

bundle agent postfix_autorun()
{
    meta:
        "tags"  slist => { "service_postfix", "template_postfix" };

    methods:
        any::
            ""  usebundle => scl_data_autorun("postfix");
            ""  usebundle => postfix_install();
            ""  usebundle => postfix_surfsara_config();
            ""  usebundle => postfix_daemons_check();

        POSTFIX_VIRTUAL_MAPS::
            "" usebundle => postfix_virtual_alias_maps();

}

bundle agent postfix_install()
{
    methods:
        "" usebundle => scl_service_packages("postfix", "@(postfix.packages)");
}

bundle agent postfix_daemons_check
{
    processes:
        linux::
            "$(postfix.daemon_name)"
                comment         => "Check if the required daemon is running",
                process_count   => check_range("$(postfix.daemon_name)", "1", "1"),
                process_select  => scl_select_parent_process("1");

    commands:
        linux::
            "$(postfix.setpermissions)"
                if => canonify("$(postfix.daemon_name)_out_of_range");

            "$(postfix.postfix_restart)"
                if => canonify("$(postfix.daemon_name)_out_of_range");

    reports:
        linux::
            "$(this.bundle): $(postfix.daemon_name) with PPID:1 not running"
                if => canonify("$(postfix.daemon_name)_out_of_range");
}

bundle agent postfix_surfsara_config
{
    classes:
        "POSTFIX_NEWALIAS" or => {
            "sara_etc_aliases"
        };

        "POSTFIX_RELOAD" or => {
            "sara_etc_postfix_main_cf",
            "sara_etc_postfix_master_cf",
            "sara_etc_postfix_dynamicmaps_cf",
            "sara_etc_postfix_recipient_canonical",
        };

    files:
        "/etc/postfix/main.cf"
            perms => mog("0644", "root", "root"),
                comment => "Must be readable for all users";

    methods:
        "" usebundle => scl_mustache_autorun("postfix");

    commands:
        POSTFIX_NEWALIAS::
            "$(postfix.newaliases)";

        POSTFIX_RELOAD::
            "$(postfix.postfix_reload)";

        sara_etc_postfix_transport::
            "$(postfix.postmap_cmd) $(postfix.config_dir)/transport"
                comment => "This is a hashed file, so we need to use postmap after a change";
}

bundle agent postfix_virtual_alias_maps_expand(virtual_map_id)
{
    classes:
        "needs_postmap" expression => strcmp("$(scl.postfix[virtual_alias_maps][$(virtual_map_id)][protocol])", "hash");

    files:
        "$(scl.postfix[virtual_alias_maps][$(virtual_map_id)][dest])"
            create => "true",
            edit_template => "$(def.node_template_dir)/postfix/$(scl.postfix[virtual_alias_maps][$(virtual_map_id)][template])",
            template_method => "mustache",
            template_data => "@(scl.postfix[virtual_alias_maps][$(virtual_map_id)][data])",
            classes => results("namespace", "postfix_virtual_alias_maps_expand_$(virtual_map_id)");

    commands:
        "$(postfix.postmap_cmd) $(scl.postfix[virtual_alias_maps][$(virtual_map_id)][dest])"
            if => and(
                "needs_postmap",
                "postfix_virtual_alias_maps_expand_$(virtual_map_id)_repaired"
            );
}

bundle agent postfix_virtual_alias_maps()
{
    vars:
        "template_maps" slist => getindices("scl.postfix[virtual_alias_maps]");

    methods:
        "" usebundle => scl_mustache_copy("postfix", "$(scl.postfix[virtual_alias_maps][$(template_maps)][template])");
        "" usebundle => postfix_virtual_alias_maps_expand("$(template_maps)");

    reports:
        "$(this.bundle) Template $(template_maps) : $(scl.postfix[virtual_alias_maps][$(template_maps)][template])"
             if => "DEBUG|DEBUG_postfix|DEBUG_$(this.bundle)";
}

@if minimum_version(99.9)
# postfix

Source: [postfix.cf](/services/postfix.cf)

This bundle will check and configure postfix for Debian and CentOS. The following
files will be generated from mustache templates:
 * /etc/aliases
 * /etc/postfix/main.cf
 * /etc/postfix/master.cf
 * /etc/postfix/dynamicmaps.cf
 * /etc/postfix/recipient_canonical
 * /etc/postfix/header_checks
 * /etc/postfix/transport

Created by the bundle postfix_virtual_alias_map()
 * /etc/postfix/virtual_alias_maps.cf

If one of the files is changed then the following ''class'' will be set:
 * sara_etc_aliases
 * sara_etc_postfix_main_cf
 * sara_etc_postfix_master_cf
 * sara_etc_postfix_dynamicmaps_cf
 * sara_etc_postfix_recipient_canonical
 * sara_etc_postfix_header_checks
 * sara_etc_postfix_transport

These files will be generated with the aid of mustache templates with json data.
the templates are located in:
 * templates/postfix/
 * templates/postfix/json


## Usage

The bundle can be run via:
 * `def.scl_services_enabled`
```json
"vars": {
    "scl_services_enabled": [
            "...",
            "postfix",
            "..."
    ]
}
```

The bundle will aways read the [default.json](/templates/postfix/json/default.json) file
and extra json file(s) can be specified via:
 * def.cf
```
vars:
    any::
        "postfix_json_files" slist => { "zimbra.json" };
```

The variable must be ''postfix_json_files'' and with this setup 1 extra json file will be  merged.

### DEBUG

if you want to debug this bundle set the `DEBUG_postfix` class, eg:
 * `-DDEBUG_postfix`

## def.cf/json

See [default.json](/templates/postfix/json/default.json) what the default values are and
which variables can be overriden

Here are some examples how to use it:
 * specify postfix configuration in def.cf:
```
vars:
    "postfix_json_files" slist => { "zimbra.json" };
```
 * Set/Override options variable in a *def.json* file:
```json
"vars": {
    "postfix" : {
        "alias_root_email_address": "noreply@surfsara.nl",
        "json_files": [ "zimbra.json" ],
        "file_aliases_lines": [ {"name": "beowulf", "value": "|\"/usr/bin/run_email2trac --project beowulf\""} ]
    }
}
```

 * override server setting in def.cf
```
vars:
    "postfix" data => parsejson( '{ "alias_root_email_address":  "file_aliases_lines"  }' );
```


### virtual_alias_maps

with this bundle you can define youw own mustache template with json data for creating
the virtual alias map file(s). The format of the `virtual_alias_maps` is:
```json
"virtual_alias_maps": {
    "mustache_file": {
        "data": {},
        "delimiter": "",
        "dest": "",
        "protocol": ""
    }
}
```
j
An example for defining an LDAP alias map for mustache (.forward is fetch from LDAP). This will copy the template
`ldap_aliases_map.mustache` and expand it with the give json data.
```json
"postfix": {
    "classes" : {
        "VIRTUAL_MAPS": [ "mta.example.com" ],:
    },
    "virtual_alias_maps": {
        "ldap_aliases_map.mustache": {
            "delimiter": ":",
            "dest": "/etc/postfix/virtual_alias_maps.cf",
            "protocol": "ldap",
            "data": {
                "bind": true,
                "bind_options": {
                    "dn": "<your_dn>",
                    "pw": "<your_bind_password>"
                },
                "port": "636",
                "query_filter": "(uid=%s)",
                "result_attribute": "mail",
                "search_base": "ou=Users,dc=example,dc=com",
                "server": "ldaps://ldap.example.com"
            }
        }
    }
}
```
@endif
