#
## nscd.cf @SURF
#
bundle common nscd
{
    vars:
        any::
            "template_2_destination" data => parsejson('
                {
                    "nscd.mustache"  : "$(config_file)",
                }
            ');

            "config_file" string => "/etc/nscd.conf";
            "owner" string => "root";
            "group" string => "root";
            "mode" string => "0644";
            "daemon_name" string => "nscd";
            "service_name" string => "nscd";

    systemd::
            "restart" string => "$(paths.path[systemctl]) restart $(service_name)";
    !systemd::
            "restart" string => "$(paths.path[service]) $(service_name) restart";
}

bundle agent nscd_autorun()
{
    meta:
        "tags" slist => { "service_nscd", "template_nscd" };

    methods:
        any::
            "" usebundle => nscd_install();
            "" usebundle => nscd_config();
            "" usebundle => nscd_daemons_check();
}

bundle agent nscd_daemons_check
{
    processes:
        any::
            "$(nscd.daemon_name)"
                comment 	    => "Check if nscd is running with PPID=1",
                process_count   => check_range("$(nscd.daemon_name)", "1", "1"),
                process_select  => scl_select_parent_process("1");

    commands:
        any::
            "$(nscd.restart)"
                if => canonify("$(nscd.daemon_name)_out_of_range");

    reports:
        any::
            "nscd_daemons_check : $(nscd.restart)"
                if => canonify("$(nscd.daemon_name)_out_of_range");
}

bundle agent nscd_install()
{
    vars:
        debian|centos::
            "packages" data => parsejson('
                {
                    "install": {
                        "nscd": ""
                    }
                }
            ');

    methods:
        any::
            "" usebundle => scl_service_packages("nscd", "@(nscd_install.packages)");
}

bundle agent nscd_config()
{
    vars:
        any::
            "nscd_config_file_class" string => canonify("scl$(nscd.config_file)");

    classes:
        "NSCD_RESTART" or => {
            "$(nscd_config_file_class)",
        };

    files:
        any::
            "$(nscd.config_file)"
                 perms => mog("$(nscd.mode)", "$(nscd.owner)", "$(nscd.group)");

    methods:
        any::
            "" usebundle => scl_mustache_autorun("nscd");

    commands:
       NSCD_RESTART::
            "$(nscd.restart)";

    reports:
       NSCD_RESTART::
            "$(nscd.config_file) has been regenerated: $(nscd.restart)";

}
@if minimum_version(99.9)
# nscd

Source: [nscd.cf](/services/nscd.cf)

This bundle will generate these files from mustache templates:
 * /etc/nscd.conf

f one of the files is changed then the followong ''class'' will be set:
 * scl_etc_nscd_conf

These files will be generated with the aid of mustache templates with json data.
the templates are located in:
 * templates/nscd/
 * templates/nscd/json

## Usage

The bundle can be run via:
 * `def.scl_services_enabled`
```json
"vars": {
    "scl_services_enabled": [
            "...",
            "nscd",
            "..."
    ]
}
```

The bundle will aways read the [default.json](/templates/nscd/json/default.json) file
and extra json file(s) can be specified via:
 * def.cf
```
vars:
    any::
        "nscd_json_files" slist => { "disable_cache.json" };
```

The variable must be `nscd_json_files` and with this setup 1 extra json file will be  merged.

### DEBUG

If you want to debug these bundle set the `DEBUG_nscd` class, eg:
 * `-DDEBUG_nscd`


## def.cf/json

See [default.json](/templates/nscd/json/default.json) what the default values are and
which variables can be overriden

The following must be set in the specific `def.json` hostfile
```json
"vars": {
    "nscd": {
        ...
        "json_files": [ "disable_cache.json" ],
        ...
    }
}
```

Here are some examples how to use it:
 * specify nscd configuration in def.cf:
```
vars:
    "nscd_json_files" slist => { "disable_cache.json" };
```
 * Set/Override the daemon options variable in ''def.json'':
```json
"nscd" : {
    "debug-level": "1"
}
```
 * override server setting in def.cf
```
vars:
    "nscd" data => parsejson( '{ "max-threads" :  "7" }' );
```
@endif
