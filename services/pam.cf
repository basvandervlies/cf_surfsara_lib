#
## pam.cf @SURFsara
#
bundle common pam()
{
    vars:

        any::
            "dir"         string => "/etc/pam.d";

            "mode"   string => "0644";
            "owner"  string => "root";
            "group"  string => "root";
}

bundle agent pam_autorun()
{
    meta:
        "tags" slist => { "autorun", "template_pam" };

    methods:
        any::
            "" usebundle => sara_data_autorun("pam");
            "" usebundle => pam_surfsara_config();

    reports:
        verbose_mode::
            "$(this.bundle): surfsara template run";
}

bundle agent pam_surfsara_config()
{
    classes:
        "pam_listfile_set" expression => isvariable("sara_data.pam[pam_listfile]");
        "pam_cp_files_set" expression => isvariable("sara_data.pam[copy_files]");

    methods:
        any::
            "" usebundle => pam_generate_files();

        pam_listfile_set::
            "" usebundle => pam_listfiles_generate();

        pam_cp_files_set::
            "" usebundle => sara_service_copy_files("pam");
}

bundle agent pam_generate_files()
{
    vars:
        pam_generate_files_os_set::
            "found" string => "/etc/os-release";
            "os" string => "$(sys.os_release[ID])";

        !pam_generate_files_os_set.centos::
            "found" string => "cfengine hardclass";
            "os" string => "centos";

        any::
            "files" slist => getindices("sara_data.pam[$(os)]");

    classes:
        "pam_generate_files_os_set" expression => isvariable( "sara_data.pam[$(sys.os_release[ID])]" ),
            comment => "Modern os has /etc/os-release file";

    methods:
        any::
            "" usebundle => pam_generate_file( "$(files)", "$(sara_data.pam[$(os)][$(files)])" );

    reports:
        any::
            "$(this.bundle): $(os):'$(found))'  $(files): $(sara_data.pam[$(os)][$(files)])"
                comment => "Show which files are generated",
                ifvarclass => "DEBUG|DEBUG_pam|DEBUG_$(this.bundle)";

        !(pam_generate_files_os_set|centos)::
            "$(this.bundle): No pam file(s) are generated , missing variable: 'pam[$(sys.os_release[ID])]'";
}


bundle agent pam_generate_file(file, data_section)
{
    vars:
        any::
            "header" string => "## Maintained by CFengine$(const.n)#$(const.n)";
            "pam_mustache" string => "$(header)
# {{{$(data_section).comment}}}
{{#$(data_section).rules}}
{{{.}}}
{{/$(data_section).rules}}
";

    classes:
        "data_section_exists" expression => isvariable("sara_data.pam[$(data_section)]");

    files:
@if minimum_version(3.12)
        data_section_exists::
                "$(file)"
                     comment => "Vixie cron: one command per file",
                     create => "true",
                     edit_template_string   => "$(pam_mustache)",
                     template_method => "inline_mustache",
                     template_data => "@(sara_data.pam)",
                     classes => if_repaired("sara$(file)");

                "$(file)"
                    perms => mog("$(pam.mode)", "$(pam.owner)", "$(pam.group)");
@endif

    reports:
        any::
            #"$(this.bundle): $(pam_mustache)";

@if minimum_version(3.11)
        data_section_exists::
            "$(this.bundle): $(file): $(with)"
                comment => "Display the pam file data",
                #with => string_mustache("{{$-top-}}", data_expand("sara_data.pam[$(data_section)]")),
                with => string_mustache("$(const.n)$(pam_mustache)", "sara_data.pam"),
                ifvarclass => "DEBUG|DEBUG_pam|DEBUG_$(this.bundle)";
@endif
        !data_section_exists::
            "error:PAM json data section '$(data_section)' does not exits";
}

bundle agent pam_listfiles_generate()
{
    vars:
        any::
            "items" slist => getindices("sara_data.pam[pam_listfile]");

    methods:
        any::
            "" usebundle => pam_listfile_generate("/etc/security/$(items).allow", "group.allow");
            "" usebundle => pam_listfile_generate("/etc/security/$(items).deny", "group.deny");
}

bundle agent pam_listfile_generate(file, data_section)
{
    vars:
        any::
            "listfile_mustache" string => "
{{#pam_listfile.$(data_section)}}
{{{.}}}
{{/pam_listfile.$(data_section)}}
";

    files:
@if minimum_version(3.12)
        any::
                "$(file)"
                     comment => "Vixie cron: one command per file",
                     create => "true",
                     edit_template_string   => "$(listfile_mustache)",
                     template_method => "inline_mustache",
                     template_data => "@(sara_data.pam)";
@endif

    reports:
        any::
@if minimum_version(3.11)
            "$(this.bundle): $(file): $(with)"
                comment => "Display the pam file data",
                #with => string_mustache("{{$-top-}}", data_expand("sara_data.pam.$(data_section)")),
                #with => string_mustache("{{#pam_listfile.$(data_section)}} {{{.}}} {{/pam_listfile.$(data_section)}}", "sara_data.pam"),
                with => string_mustache("$(const.n)$(listfile_mustache)", "sara_data.pam"),
                ifvarclass => "DEBUG|DEBUG_pam|DEBUG_$(this.bundle)";
@endif

}

@if minimum_version(99.9)
# pam

Source: [pam.cf](/services/pam.cf)

This bundle will generate pam files in `$(pam.dir):/etc/pam.d` with the aid of
inline mustache template. Only work for cfengine => 3.12.

if one of the files is changed then the following **class** will be set:
 * `sara_etc_pam_d_<filename>`

These files will be generated with the  json data specified
the templates are located in:
 * templates/pam/
 * templates/pam/json

## Usage

The bundle can be run via:
 *  `"" usebundle => pam_autorun();`
 * `def.sara_services_enabled` (prefered)
```json
"vars": {
    "sara_services_enabled": [
            "...",
            "pam",
            "..."
    ]
}
```

The bundle will aways read the [default.json](/templates/pam/json/default.json) file
and extra json file(s) can be specified via:
 * def.cf
```
vars:
    any::
        "pam_json_files" slist => { "ldap.json", "ldap_pam.json" };
```

The variable must be ''pam_json_files'' and with this setup 2 extra json file will be  merged.

### Debug

If you want to debug these bundle set the `DEBUG_pam` class, eg:
 * `-DDEBUG_pam`


## Def.cf/json

See [default.json](/templates/pam/json/default.json) what the default values are and
which variables can be overriden.

Here are some examples how to use it:
 * specify pam configuration in def.cf:
```
vars:
    "pam_json_files" slist => { "default_pam.json" };
```
 * Define pam stack in *pam/templates/json/sara.json*:
```json
"common-account": {
    "comment": "only local logins",
    "rules": [
        "account [success=1 new_authtok_reqd=done default=ignore]   pam_unix.so",
        "account requisite                                          pam_deny.so",
        "account required                                           pam_permit.so"
    ]
},
"common-auth": {
    "comment": "only local logins",
    "rules": [
        "auth [success=1 default=ignore]    pam_unix.so nullok_secure",
        "auth requisite                     pam_deny.so",
        "auth required                      pam_permit.so"
    ]
},
"common-password": {
    "comment": "only local logins",
    "rules": [
        "auth [success=1 default=ignore]    pam_unix.so obscure sha512",
        "auth requisite pam_deny.so",
        "auth required pam_permit.so"
    ]
},
"common-session": {
    "comment": "only local logins",
    "rules": [
        "session [default=1]     pam_permit.so",
        "session requisite       pam_deny.so",
        "session required        pam_permit.so",
        "session required        pam_unix.so"
    ]
},
"common-session-noninteractive": {
    "comment": "only local logins",
    "rules": [
        "session [default=1]     pam_permit.so",
        "session requisite       pam_deny.so",
        "session required        pam_permit.so",
        "session required        pam_unix.so"
    ]
},
"system-auth": [
    "#",
    "# Auth section",
    "#",
    "auth        required      pam_env.so",
    "auth        required      pam_faildelay.so delay=2000000",
    "auth        sufficient    pam_fprintd.so",
    "auth        sufficient    pam_unix.so nullok try_first_pass",
    "auth        requisite     pam_succeed_if.so uid >= 1000 quiet_success",
    "auth        required      pam_deny.so",
    "#",
    "# Account section",
    "#",
    "account     required      pam_unix.so",
    "account     sufficient    pam_localuser.so",
    "account     sufficient    pam_succeed_if.so uid < 1000 quiet",
    "account     required      pam_permit.so",
    "#",
    "# Password section",
    "#",
    "password    requisite     pam_pwquality.so try_first_pass local_users_only retry=3 authtok_type=",
    "password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok",
    "password    required      pam_deny.so",
    "#",
    "# Session section",
    "#",
    "session     optional      pam_keyinit.so revoke",
    "session     required      pam_limits.so",
    "session     [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uid",
    "session     required      pam_unix.so"
]
```

 * create the pam files with the above  data definitions
```
vars:
    "pam" data => parsejson('{
        centos: {
            "$(pam.dir)/system-auth": "system-auth"
        },
        debian: {
            "$(pam.dir)/common-account": "common-account",
            "$(pam.dir)/common-auth": "common-auth",
            "$(pam.dir)/common-password": "common-password",
            "$(pam.dir)/common-session": "common-session",
            "$(pam.dir)/common-session-noninteractive": "common-session-noninteractive"
        }
    }');
```

  * You can create your own data section and generate your own pam files, eg:
```json
"vars": {
    "pam": {
        "sudo-radius": {
            "comment": "radius",
            "rules": [
                "auth required pam_radius_auth.so skip_passwd retry=1"
            ]
        },
        "debian": {
            "$(pam.dir)/sudo": "sudo-radius"
        }
    }
}
```
@endif
