
## slurm.cf  @SURFsara
#
bundle agent slurm()
{
    vars:
        any::
            "acct_gather_file"      string => "$(config_dir)/acct_gather.conf";
            "config_file"           string => "$(config_dir)/slurm.conf";
            "cgroup_config_file"    string => "$(config_dir)/cgroup.conf";
            "cgroup_allowed_file"   string => "$(config_dir)/cgroup_allowed_devices_file.conf";
            "gres_config_file"      string => "$(config_dir)/gres.conf";
            "nodes_config_file"     string => "$(config_dir)/nodes.conf";
            "plugstack_config_file" string => "$(config_dir)/plugstack.conf";
            "slurmdbd_file"         string => "$(config_dir)/slurmdbd.conf";
            "topology_config_file"  string => "$(config_dir)/topology.conf";

            "scontrol_cmd"          string => "/usr/bin/scontrol";

            ## slurm uid/gid/mode
            "gid"                   string => "555";
            "group"                 string => "slurm";
            "mode"                  string => "0644";
            "owner"                 string => "slurm";
            "uid"                   string => "555";

            ## nodes.conf will be removed from template generation BvdV 27/Sep/2021
            "template_2_destination" data => parsejson('{
                    "acct_gather.mustache": "$(acct_gather_file)",
                    "cgroup.mustache": "$(cgroup_config_file)",
                    "cgroup_allowed_devices_file.mustache": "$(cgroup_allowed_file)",
                    "gres.mustache": "$(gres_config_file)",
                    "nodes.mustache": "$(nodes_config_file)",
                    "plugstack.conf.mustache": "$(plugstack_config_file)",
                    "slurm.mustache": "$(config_file)",
                    "slurmdbd.mustache": "$(slurmdbd_file)",
                    "topology.mustache": "$(topology_config_file)",
            }');

        any::
            "dir" string => "$(scl.slurm[dir])";
            "config_dir" string => "$(scl.slurm[config_dir])";
            "current_version" string => "$(scl.slurm[current_version])";
            "log_dir" string => "$(scl.slurm[log_dir])";
            "major_version" string => string_head("$(scl.slurm[current_version])", "5");
            "opt_dir" string => "$(scl.slurm[opt_dir])";
            "plugin_dir" string => "$(scl.slurm[plugin_dir])";
            "plugstack_dir" string => "$(scl.slurm[plugstack_dir])";
            "scripts_dir" string => "$(scl.slurm[scripts_dir])";
            "software_dir" string => "$(scl.slurm[software_dir])";
            "spool_dir" string => "$(scl.slurm[spool_dir])";
            "tarball_dir" string => "$(scl.slurm[tarball_dir])";

        systemd::
            "client_service_name" string => "slurmd";
            "controller_service_name" string => "slurmctld";
            "database_service_name" string => "slurmdbd";

            "restart_client"     string => "$(paths.path[systemctl]) restart $(client_service_name)";
            "restart_controller" string => "$(paths.path[systemctl]) restart $(controller_service_name)";
            "restart_database"   string => "$(paths.path[systemctl]) restart $(database_service_name)";

            "reload_client"     string => "$(paths.path[systemctl]) reload $(client_service_name)";
            "reload_controller" string => "$(scontrol_cmd) reconfigure";
            "reload_database"   string => "$(paths.path[systemctl]) reload $(database_service_name)";
}

bundle agent slurm_autorun()
{
    meta:
        "tags" slist => { "service_slurm", "template_slurm" };

    classes:
        "disable_services_set" expression => isvariable("scl.slurm[disable_services]");

    methods:
        any::
            "" usebundle => slurm();
            "" usebundle => slurm_install();
            "" usebundle => slurm_config();
            "" usebundle => slurm_daemon_check();

        SLURM_BACKUP::
            "" usebundle => slurm_db_backup(),
                if => or(
                    "$(scl.slurm[backup_schedule])",
                    "SLURM_BACKUP_SCHEDULE"
                    ),
                action => if_elapsed(50);

        SLURM_LOGROTATE::
            "" usebundle => slurm_logrotate(),
                comment => "slurm service bundle handles logrotate",
                if => or(
                    "$(scl.slurm[logrotate_schedule])",
                    "SLURM_LOGROTATE_SCHEDULE"
                    ),
                action => if_elapsed(50);

        systemd.disable_services_set::
            "" usebundle => systemd_disable_service("$(scl.slurm[disable_services])");

    reports:
        systemd.disable_services_set::
            "$(this.bundle): $(slurm.major_version) : systemd services disable for: $(scl.slurm[disable_services])"
                if => "DEBUG|DEBUG_slurm";
}

bundle agent slurm_install()
{
    methods:
        !SLURM_TARBALL::
            "" usebundle => slurm_install_pkg();

        SLURM_TARBALL::
            "" usebundle => slurm_install_tarball();
            "" usebundle => slurm_current_version();

        SLURM_SYSTEMD_SERVICES|SLURM_TARBALL::
            "" usebundle => slurm_generate_systemd_services();
}

bundle agent slurm_install_pkg()
{
    vars:
        any::
            "version" string => ifelse( isvariable("scl.slurm[version]"), "$(scl.slurm[version])", "");
            "pyslurm_version" string => ifelse( isvariable("scl.slurm[pyslurm_version]"), "$(scl.slurm[pyslurm_version])", "");
            "packages" data => parsejson('{}');

        SLURM_SERVER:: "packages" data => mergedata( "packages", "scl.slurm[packages_server]"),
                comment => 'List of slurm packages';

        SLURM_CLIENT::
            "packages" data => mergedata( "packages", "scl.slurm[packages_client]"),
                comment => 'List of slurm packages';

        SLURM_SUBMIT::
            "packages" data => mergedata( "packages", "scl.slurm[packages_submit]"),
                comment => 'List of slurm packages';

    methods:
        any::
            "" usebundle =>  scl_service_packages("slurm", "@(slurm_install_pkg.packages)"),
                classes => results("bundle", "slurm_packages");

        SLURM_SLURMD_DISABLE::
            "" usebundle => systemd_stop_service("slurm"),
                if => "slurm_packages_repaired";
}

bundle agent slurm_install_tarball()
{
    vars:
        any::
            "header" string => "## Maintained by CFengine$(const.n)#";
            "packages" data => parsejson('{}');
            "template" string => "$(header)
$(slurm.software_dir)/current/lib
$(slurm.software_dir)/current/lib/slurm
";

    classes:
        any::
            "tarballs_set" expression => isvariable("scl.slurm[install_tarballs]"),
                comment => "Must we copy tarballs for slurm";

            "slurm_grp" expression => groupexists("$(slurm.group)");

    files:
        any::
            "/etc/ld.so.conf.d/slurm.conf"
                create => "true",
                edit_defaults => no_backup,
                edit_template_string => "$(template)",
                template_method => "inline_mustache",
                classes => results("bundle", "ld_config_slurm");

            "$(slurm.log_dir)/."
                create => "true",
                perms => mog("0700", "root", "root");

            "$(slurm.software_dir)/."
                perms => mog("0755", "root", "root"),
                create => "true";

    methods:
        any::
            "" usebundle => scl_service_install_tarballs("slurm"),
                classes => results("bundle", "slurm_tarball");

            "" usebundle => scl_service_packages("slurm", "@(slurm_install_tarball.packages)");

    users:
        slurm_grp::
            "slurm"
                policy => "present",
                home_dir => "/nonexistent",
                group_primary => "$(slurm.group)",
                uid => "$(slurm.uid)",
                shell => "/bin/false";

    commands:
        any::
            "/sbin/ldconfig"
                if => "ld_config_slurm_repaired";

            "$(paths.path[groupadd]) --gid $(slurm.gid) $(slurm.group)"
                if => "!slurm_grp";
}

bundle agent slurm_current_version()
{
    files:
        any::
            "$(slurm.software_dir)/current"
                link_from => ln_s("$(slurm.software_dir)/$(slurm.current_version)"),
                move_obstructions => "true",
                classes => results("bundle", "current_version");

        current_version_repaired|SLURM_FORCE_LINKS::
             "/usr/bin"
                comment => "slurm client program link them in /usr/bin",
                link_from => linkchildren("$(slurm.software_dir)/current/bin");

             "/usr/sbin"
                comment => "slurm client program link them in /usr/sbin",
                link_from => linkchildren("$(slurm.software_dir)/current/sbin");

             "$(pam.lib_dir)/pam_slurm_adopt.so"
                copy_from   => local_dcp("$(slurm.software_dir)/current/pam/pam_slurm_adopt.so"),
                perms => mog("0755", "root", "root");

    commands:
        SLURM_CLIENT.current_version_repaired::
            "$(slurm.restart_client)";
}

bundle agent slurm_daemon_check()
{
    processes:
        SLURM_CLIENT::
             "$(slurm.client_service_name)"
                  comment        => "Check if slurmd is running",
                  process_count  => check_range("$(slurm.client_service_name)", "1", "1"),
                  process_select => scl_select_parent_process("1");

        SLURM_SERVER::
             "$(slurm.controller_service_name)"
                  comment        => "Check if slurmctld is running",
                  process_count  => check_range("$(slurm.controller_service_name)", "1", "1"),
                  process_select => scl_select_parent_process("1");

             "$(slurm.database_service_name)"
                  comment        => "Check if slurmdbd is running",
                  process_count  => check_range("$(slurm.database_service_name)", "1", "1"),
                  process_select => scl_select_parent_process("1");

    commands:
        any::
            "$(slurm.restart_client)"
                if => and(canonify("$(slurm.client_service_name)_out_of_range"));

            "$(slurm.restart_controller)"
                if => and(canonify("$(slurm.controller_service_name)_out_of_range"));

            "$(slurm.restart_database)"
                if => and(canonify("$(slurm.database_service_name)_out_of_range"));
}


bundle agent slurm_config()
{
    vars:
        any::
            "slurm_mog_list" slist => {
                "$(slurm.acct_gather_file)",
                "$(slurm.config_file)",
                "$(slurm.cgroup_config_file)",
                "$(slurm.cgroup_allowed_file)",
                "$(slurm.gres_config_file)",
                "$(slurm.nodes_config_file)",
                "$(slurm.plugstack_config_file)",
                "$(slurm.topology_config_file)",
            },
                comment => "These files must be owned by slurm user";

            "generated_files" slist => getvalues("slurm.template_2_destination");

        SLURM_CONFIGLESS::
            "configless_files" slist => lsdir("/run/slurm/conf", ".+", "true");

    classes:
        any::
            "slurm_reload"
                if => or(
                    canonify("scl$(slurm.cgroup_config_file)"),
                    canonify("scl$(slurm.gres_config_file)"),
                    canonify("scl$(slurm.config_file)"),
                    canonify("scl$(slurm.topology_config_file)")
                    );

            "slurm_restart"
                if => or(
                    canonify("scl$(slurm.nodes_config_file)"),
                    canonify("scl$(slurm.plugstack_config_file)")
                    );

            "slurm_copy_dirs_set" expression => isvariable("scl.slurm[copy_dirs]"),
                comment => "Must we copy dirs for slurm";
            "slurm_copy_files_set" expression => isvariable("scl.slurm[copy_files]"),
                comment => "Must we copy dirs for slurm";

            "slurm_plugstack_dir" expression => isdir("$(slurm.config_dir)/plugstack.conf.d"),
                comment => "has been replaced by a single file to support configless";

            "slurm_conf_exists" expression => isplain($(slurm.config_file)),
                comment => "Needed by SLURM_CONFIGLESS class";

    methods:
        SLURM_SERVER|!SLURM_CONFIGLESS::
            "" usebundle => scl_mustache_autorun("slurm");

        slurm_copy_dirs_set::
            "" usebundle => scl_service_copy_dirs("slurm");

        slurm_copy_files_set::
            "" usebundle => scl_service_copy_files("slurm");

        slurm_restart|slurm_configless_repaired::
            "" usebundle => slurm_service_restart();

        slurm_reload.!slurm_restart::
            "" usebundle => slurm_service_reload();

        slurm_plugstack_dir::
            "" usebundle => rm_rf("$(slurm.config_dir)/plugstack.conf.d");

    files:
        any::
            "$(slurm.config_dir)"
                perms => mog("$(slurm.mode)", "$(slurm.owner)", "$(slurm.group)");

            "$(slurm.spool_dir)/."
                perms => mog("${slurm.mode}", "$(slurm.owner)", "$(slurm.group)"),
                create => "true";

        SLURM_SERVER|!SLURM_CONFIGLESS::
            "$(slurm.slurmdbd_file)"
                perms => mog("0600", "$(slurm.owner)", "$(slurm.group)");

            "$(slurm_mog_list)"
                comment => "Not needed for slurm configless setups",
                perms => mog("$(slurm.mode)", "$(slurm.owner)", "$(slurm.group)");

        SLURM_CONFIGLESS.!SLURM_SERVER.slurm_conf_exists::
            "$(generated_files)"
                comment => "These files are not needed any more for configless setup",
                delete => tidy,
                classes => results("bundle", "slurm_configless");

        SLURM_CONFIGLESS_CONF_LINKS.!SLURM_SERVER::
            "$(slurm.config_file)"
                comment => "needed for pyslurm and other tools",
                link_from => ln_s("/run/slurm/conf/slurm.conf"),
                move_obstructions => "true";

            "$(slurm.plugstack_config_file)"
                comment => "Needed for sbatch/srun spank command line options, if slurm.conf is symbolic link",
                link_from => ln_s("/run/slurm/conf/plugstack.conf"),
                move_obstructions => "true";

        SLURM_CONFIGLESS::
            "$(configless_files)"
                comment => "Must slurmd be restarted",
                changes => detect_content,
                classes => results("bundle", "slurm_configless");

    reports:
}

bundle agent slurm_service_restart()
{
    commands:
        SLURM_CLIENT::
            "$(slurm.restart_client)";

        SLURM_SERVER::
            "$(slurm.restart_controller)";

    reports:
        any::
            "$(this.bundle): Restart slurm service a config file has been changed that require this";
}

bundle agent slurm_service_reload()
{
    commands:
        SLURM_CLIENT::
            "$(slurm.reload_client)";

        SLURM_SERVER::
            "$(slurm.reload_controller)";

    reports:
        any::
            "$(this.bundle): Reload slurm service a config file has been changed that require this";
}

bundle agent slurm_db_backup()
{
    vars:
        "cmd" string => format("%s --host=%s --user=%s --password=%s %s",
            $(scl.slurm[backup_config][cmd]),
            $(scl.slurm[backup_config][host]),
            $(scl.slurm[backup_config][user]),
            $(scl.slurm[backup_config][password]),
            $(scl.slurm[backup_config][options])
            );

    files:
        "$(scl.slurm[backup_dir])/."
            perms => mog("700", "root", "root"),
            create => "true";

        "$(scl.slurm[backup_dir])/db.sql"
            rename => rotate("$(scl.slurm[backup_config][copies])");

        # Can be removed 2/sep/2020
        #"$(scl.slurm[backup_dir])/$(scl.slurm[ClusterName]).cfg"
            #rename => rotate("$(scl.slurm[AssocBackup][copies])");

    commands:
        "$(cmd)"
            comment => "Redirect must be in the args section",
            contain => in_shell,
            args => "> $(scl.slurm[backup_dir])/db.sql";

        # Can be removed 2/sep/2020
        #"$(scl.slurm[AssocBackup][cmd])"
        #    contain => in_shell_and_silent,
        #    args => "$(scl.slurm[ClusterName]) file=$(scl.slurm[backup_dir])/$(scl.slurm[ClusterName]).cfg";

    reports:
        any::
            "$(this.bundle): $(cmd) > $(scl.slurm[backup_dir])/db.sql"
                 if => "DEBUG|DEBUG_slurm|DEBUG_$(this.bundle)";

        # Can be removed 2/sep/2020
        #    "$(this.bundle): $(scl.slurm[AssocBackup][cmd])  $(scl.slurm[backup_dir])/$(scl.slurm[ClusterName]).cfg"
        #         if => "DEBUG|DEBUG_slurm|DEBUG_$(this.bundle)";
}

bundle agent slurm_logrotate()
{
    vars:
        any::
            "logrotate_files" slist => { "slurmd", "slurmdbd", "slurmctld" };

        SLURM_CLIENT::
            "log_files" slist => { "slurmd.log" };
        SLURM_SERVER::
            "log_files" slist => { "slurmdbd.log ", "slurmctld.log" };

    classes:
        "logrotate" or => {
            SLURM_CLIENT,
            SLURM_SERVER,
          };

    files:
        any::
            "/etc/logrotate.d/$(logrotate_files)"
                comment => "remove files causes unnecessary restart of daemon",
                delete => tidy;

        logrotate::
            "$(slurm.log_dir)/$(log_files)"
                rename  => rotate("7");

    reports:
        DEBUG_slurm|DEBUG::
            "$(this.bundle): has been called";
}

### this bundle is obsolete and can be removed
bundle agent slurm_spank_templates()
{
    vars:
        any::
            "files" slist => getindices("scl.slurm[spank_templates]");

    classes:
        any::
            "run_bundle_$(files)" expression => isvariable("scl.slurm[spank_templates][$(files)][run_bundle]"),
                comment => "Must we run a bundle when a file has been changed";

            "run_class_any_$(files)" expression => not(
                isvariable("scl.slurm[spank_templates][$(files)][run_class]")
                ),
                comment => "No run_class is set for file, so always run_bundle if defined";

            "run_class_expr_$(files)" expression => "$(scl.slurm[spank_templates][$(files)][run_class])",
                comment => "This class will be set if the expression(s) in the variable are true";

    methods:
        "" usebundle => scl_mustache_copy("slurm", "@(slurm_spank_templates.files)");

    files:
        "$(scl.slurm[spank_templates][$(files)][dest])"
            create => "true",
            edit_template => "$(def.node_template_dir)/slurm/$(files)",
            template_method => "mustache",
            template_data => "@(scl.slurm[spank_templates][$(files)][data])",
            classes => results("namespace", "SLURM_$(scl.slurm[spank_templates][$(files)][dest])");

        "$(scl.slurm[spank_templates][$(files)][dest])"
            perms => mog("$(slurm.mode)", "$(slurm.owner)", "$(slurm.group)");

    methods:
        "" usebundle => "$(scl.slurm[spank_templates][$(files)][run_bundle])",
            if => and(
                canonify("SLURM_$(scl.slurm[spank_templates][$(files)][dest])_repaired"),
                canonify("run_bundle_$(files)"),
                or(
                    canonify("run_class_any_$(files)"),
                    canonify("run_class_expr_$(files)")
                  )
                );

    reports:
        "$(this.bundle) $(files) : $(scl.slurm[spank_templates][$(files)][dest])"
             if => "DEBUG|DEBUG_slurm|DEBUG_$(this.bundle)";
}

bundle agent slurm_generate_systemd_services()
{
    vars:
        any::
            "template_2_destination" data => parsejson('{
                    "slurmctld.service.mustache": "$(systemd.dir)/slurmctld.service",
                    "slurmd.service.mustache": "$(systemd.dir)/slurmd.service",
                    "slurmdbd.service.mustache": "$(systemd.dir)/slurmdbd.service",
            }');

            "template_files" slist => getindices("template_2_destination");

    methods:
        any::
            "" usebundle => scl_mustache_copy("slurm", "@(template_files)"),
                comment => "Copy the slurm systemd templates";

            "" usebundle => scl_mustache_cf_data_2_file("slurm",
                    "$(template_files)",
                    "$(template_2_destination[$(template_files)])",
                    ""),
                comment => "generate systemd config for slurmd";

    files:
        any::
            "$(template_2_destination[$(template_files)])"
                perms => mog("644", "root", "root");

    commands:
        any::
            "$(paths.path[systemctl]) daemon-reload"
                comment => "If service file has been changed reload systemd daemon",
                if => or(
                        canonify("scl$(template_2_destination[$(template_files)])")
                    );

            "$(slurm.restart_client)"
                comment => "If service file has been changed restart slurmd",
                if => or(
                        canonify("scl$(template_2_destination[$(template_files)])")
                    );

    reports:
        any::
            "$(this.bundle): $(systemd.dir)/$(template_2_destination[$(template_files)]) this has been changed"
                if => or(
                        canonify("scl$(template_2_destination[$(template_files)])")
                    );
}
@if minimum_version(99.9)

# slurm

Source: [slurm.cf](/services/slurm.cf)

This bundle will generate these/this file(s) from mustache templates:
 * debian in `/etc/slurm-llnl`
 * centos in `/etc/slurm`
 * tarball installation uses the `config_dir` variable specified in the json file, eg `/opt/slurm/etc`
    * acct_gather.conf
    * cgroup.conf
    * cgroup_allowed_devices_file.conf
    * gres.conf
    * nodes.conf
    * plugstack.conf
    * slurm.conf
    * slurmdb.conf
    * topology.conf

If one of the files is changed then the following ""class"" will be set:
 * sara_etc_slurm_llnl_slurm_conf (debian)
 * sara_etc_slurm_slurm_conf (centos)

The class name for the other files has the same format.

These templates are located in:
 * templates/slurm
 * templates/slurm/json

The following `classes` can be set via def.cf/json:
 * BACKUP: When set make a backup of the SQL sever
 * CLIENT: Configure the machine as client
 * CONFIGLESS: Do not generate the configuration files. It will server by slurmctld
 * CONFIGLESS_CONF_LINKS: Some old utils need `slurm.conf` in the sysconfig directory
 * LOGROTATE: When set disable logrotate configs and use cfengne logrotate (no daemons restart)
 * SLURMD_DISABLE: Disable the slurmd systemd service
 * SERVER: Configure the machine as server
 * SUBMIT: Configure the machine as submit host
 * SYSTEMD_SERVICES: generate the slurm systemd unit files.
 * TARBALL: Slurm software will be installed as tarball instead of system packages + generate slurm systemd unit files

The following json variables can be set in def.cf/json to  invoke files bundles:
 * copy_files: See [files.cf](/masterfiles/lib/scl/files.cf)
 * copy_dirs: See [files.cf](/masterfiles/lib/scl/files.cf)
 * install_tarballs: See [files.cf](/masterfiles/lib/scl/files.cf)

## Usage

The bundle can be run via:
 * `def.scl_services_enabled`
```json
"vars": {
    "scl_services_enabled": [
            "...",
            "slurm",
            "..."
    ]
}
```

The bundle will always read the [default.json](/templates/slurm/json/default.json) file
and extra json file(s) can be specified via:
 * def.cf
```
vars:
    any::
        "slurm_json_files" slist => { "cluster.json" };
```

The variable must be ""slurm_json_files"" and with this setup 1 extra json file will be merged.

### DEBUG

if you want to debug this bundle set the `DEBUG_slurm` class, eg:
 * `-DDEBUG_slurm`

## def.cf/json

See [default.json](/templates/slurm/json/default.json) what the default values are and
which variables can be overriden.

Here are some examples how to use it:
 * specify resolv configuration in def.cf:
```
vars:
    "slurm_json_files" slist => { "cluster.json" };
```

 * override config settings in def.cf
```
vars:
    "slurm" data => parsejson( '{ "PrologFlags": "contains" }' );
```

 * override config settings in ''def.json'':
```json
"vars": {
    "slurm": {
            "json_files": [ "mona.json" ]
        },
}
```

 * override variable config setting in ''def.json''
```json
"slurm": {
    "PrologFlags": "contains"
}
```

### spank plugins

Slurm Plug-in architecture for Node and job Kontrol (SPANK)
plugins are configured via the `plugstack.conf` file.

This generations of the spank plugin configuration file(s) can be
done dynamically,eg:
```#json
 "spank_plugins": {
    "required": {
        "${slurm.dir}/lib/private-tmpdir.so":  "base=/scratch/slurm mount=/tmp mount=/var/tmp mount=/scratch base=/dev/shm/slurm mount=/dev/shm"
    }
  },
```

This line will be added to the `plugstack.conf` file
json data.
@endif
