bundle common munge()
{
    vars:
        any::
            "config_dir"        string => "/etc/munge";
            "log_dir"           string => "/var/log/munge";
            "var_dir"           string => "/var/lib/munge";
            "munge_key_file"    string => "$(config_dir)/munge.key";
            "service_name"      string => "munge";
            "packages"          data  => parsejson('
                    {
                        "install": {
                            "munge" : "",
                        }
                    }
                ');

            ## Mustache templates
            "template_2_destination" data => parsejson('
                    {
                        "munge.mustache" : "$(default_file)"
                    }
                ');

            ## slurm uid/gid/mode
            "gid" string => "$(scl.munge[id_group])";
            "uid" string => "$(scl.munge[id_user])";

        debian::
            "service_name"     string => "munge";
            "default_file"     string => "/etc/default/$(service_name)";
        systemd::
            "restart"          string => "$(paths.path[systemctl]) restart $(service_name)";
        !systemd::
            "restart"          string => "$(paths.path[service]) $(service_name) restart";
}

bundle agent munge_autorun()
{
    meta:
        "tags" slist => { "service_munge", "template_munge" };

    methods:
        any::
            "" usebundle => munge_install();
            "" usebundle => munge_config();
            "" usebundle => munge_daemons_check();
}

bundle agent munge_daemons_restart()
{
    commands:
        any::
            "$(munge.restart)";

    reports:
        any::
            "munged has been restarted";
}

bundle agent munge_daemons_check()
{
    processes:
        any::
            "/usr/sbin/munged"
                comment     => "Check if munged is running",
                process_count   => check_range("munge", "1", "1"),
                process_select  => scl_select_parent_process("1");

    methods:
        any::
            "" usebundle => munge_daemons_restart,
                if => canonify("munge_out_of_range");

    reports:
        munge_out_of_range::
            "No munged process is running with PPID 1";

}

### will be scl agent
bundle agent munge_check_uid_gid()
{
    classes:
        any::
            "group_id_exists" expression => groupexists("$(munge.gid)");
            "group_name_exists" expression => groupexists("munge");

            "user_id_exists" expression => userexists("$(munge.uid)");
            "user_name_exists" expression => userexists("munge");

    files:
        !group_id_exists.group_name_exists::
            "/etc/group"
                edit_line => set_colon_field("munge","3","$(munge.gid)"),
                classes => results("namespace", "MUNGE_ID");
            "/etc/passwd"
                edit_line => set_colon_field("munge","4","$(munge.gid)"),
                classes => results("namespace", "MUNGE_ID");

        !user_id_exists.user_name_exists::
            "/etc/passwd"
                edit_line => set_colon_field("munge","3","$(munge.uid)"),
                classes => results("namespace", "MUNGE_ID");

    groups:
        !group_name_exists::
            "munge"
                policy => "present",
                gid => "$(munge.gid)";

    users:
        !user_name_exists::
            "munge"
                policy => "present",
                home_dir => "/nonexistent",
                group_primary => "munge",
                uid => "$(munge.uid)",
                shell => "/bin/false";
}

bundle agent munge_install()
{

    methods:
        any::
            "" usebundle => scl_service_packages("munge", "@(munge.packages)");

        MUNGE_CHECK_UID_GID::
            "" usebundle => munge_check_uid_gid();

}

bundle agent munge_config()
{
    classes:
        any::
            "munge_copy_files_set" expression => isvariable("scl.munge[copy_files]"),
                comment => "check if we should copy any files for the munge bundle";

    files:
        MUNGE_ID_repaired::
            "$(munge.config_dir)"
                perms => og("munge", "munge"),
                depth_search => recurse_with_base("2");

            "$(munge.log_dir)"
                perms => og(,"munge", "munge"),
                depth_search => recurse_with_base("2");

            "$(munge.var_dir)"
                perms => og(,"munge", "munge"),
                depth_search => recurse_with_base("2");

    methods:
        any::
            "" usebundle => munge_daemons_restart(),
                if => or(
                    canonify("scl$(munge.munge_key_file)"),
                    canonify("scl$(munge.default_file)"),
                    "MUNGE_ID_repaired"
                );

            "" usebundle => scl_template_autorun("munge");

        munge_copy_files_set::
            "" usebundle => scl_service_copy_files("munge");

    reports:
        !munge_copy_files_set::
            "$(this.bundle): No 'copy_files' data section found for 'munge' in def.cf/json";
}
@if minimum_version(99.9)

# MUNGE

Source: [munge.cf](/services/munge.cf)

This bundle copies a munge key to a node.
 * `/etc/munge/munge.key`

This bundle will install munge and configure the following files with mustache templates:
 * /etc/default/munge (debian)

These files will be generated with the aid of mustache templates with json data.
the templates are located in:
 * templates/scl/munge/
 * templates/scl/munge/json

This bundle also makes sure that the proper owner (munge:munge) and permissions (400) are set.

The following json variables can be set in def.cf/json to invoke files bundles:
 * copy_files: See [files.cf](/masterfiles/lib/scl/files.cf)

## USAGE

The bundle can be run via:
```json
"vars": {
    "scl_services_enabled": [
            "...",
            "munge",
            "..."
    ]
}
```

The bundle will aways read the [default.json](/templates/munge/json/default.json) file
and extra json file(s) can be specified via:
 * def.cf
```
vars:
    any::
        "munge_json_files" slist => { "lisa.json" }
```

The variable must be `cron_json_files` and with this setup 1 extra json file will be merged.

### DEBUG

To debug this bundle set the `DEBUG_munge` class:

- `-DDEBUG_munge`

## def.cf/json

See [default.json](/templates/munge/json/default.json) what the default values are and
which variables can be overriden.


### COPY_FILES

With this variable is set it will copy the specified file (usually the munge key) to the
specified destination, example:
```
"copy_files": [
    {
        "dest": "$(munge.munge_key_file)",
        "source": "data/munge/lisa/munge.key",
        "mog": [ "0400", "munge", "munge" ],
        "run_bundle": "munge_daemons_restart"
    }
]
```
Where `data` is a **cf-serverd shortcut**.
@endif
