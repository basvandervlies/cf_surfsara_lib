#
#  SURFsara templates.cf
#
@if minimum_version(99.9)
# template.cf

Source: [templates.cf](/masterfiles/lib/scl/templates.cf)

Here all bundles are listed that are involved in parsing json data and
generating the templates files.

## scl(bundle_name, json_files)

This bundle will merge the json files into a data container which has the same name
as the given `bundle_name`. This data container can be accessed by other bundles
as:
 * `scl.<bundle_name>.<variable_name>`

NOTE: cfengine variables that are definied in the json files, eg: `$(def.hostname)`
are expanded.

The json files are read from the following local directory on the host:
 * `$(def.node_template_dir)/$(bundle_name)`

There is one exception if the bundle name is `expand_all_service_data`. Then the
bundle will loop over the list `def.scl_services_enabled` to expand cfengine variables.
Now service bundles can can reference variables of other service bundles,eg
```json
{
 "nhc": {
     "timeout": "$(scl.slurm[MessageTimeout])"
 },
 "slurm": {
    "MessageTimeout": "20"
 }
}
```
@endif
bundle agent scl(bundle_name, json_files)
{
    vars:
        !expand_all_service_bundles::
            "template_dir" string => "$(def.node_template_dir)/$(bundle_name)";

            "$(bundle_name)"  data  => parsejson("{}");

            "$(bundle_name)" data => mergedata("$(bundle_name)", readdata("$(template_dir)/$(json_files)", auto)),
                comment => "Merge the given json files",
                if => canonify("scl_json_file_exists_$(json_files)");

            "$(bundle_name)" data => mergedata("$(bundle_name)", "def.$(bundle_name)"),
                comment => "Merge the bundle section in def.json",
                if => canonify("scl_def_json_$(bundle_name)");

            "$(bundle_name)" data => data_expand($(bundle_name)),
                comment => "Expand CFengine variables found in countainer",
                handle => "scl_$(bundle)_expand_data";

            "$(bundle_name)" data => data_expand($(bundle_name)),
                comment => "Expand CFengine variables found in countainer",
                handle => "scl_$(bundle)_expand_data_2";


        expand_all_service_bundles::
            "services_enabled" slist => { @(def.scl_services_enabled) },
                comment => "To prevent an error in setting foreign vars, needed for backports, will be removed";

            "$(def.scl_services_enabled)" data => data_expand($(def.scl_services_enabled)),
                handle => "scl_expand_cross_reference_vars";

    classes:
        any::
            "expand_all_service_bundles" expression => strcmp("expand_all_service_data", "$(bundle_name)"),
                comment => "Try to solve cross reference bundle variables";

        !expand_all_service_bundles::
            "scl_json_file_exists_$(json_files)" expression => fileexists("$(template_dir)/$(json_files)"),
                comment => "Check if json file exists, then we can read it";

            "scl_def_json_$(bundle_name)" expression => isvariable("def.$(bundle_name)"),
                comment => "Def.json data defined";


    reports:
@if minimum_version(3.11)
        expand_all_service_bundles::
            "$(this.bundle): Cross reference variable expanding for bundles
                $(with)"
                with => format("%S", "def.scl_services_enabled"),
                if => "DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE_JSON|DEBUG_MUSTACHE|DEBUG_services";

        !expand_all_service_bundles::
            "$(this.bundle)($(bundle_name)): using json files
                $(with)"
                with => format("%S", "json_files"),
                if => "DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE_JSON|DEBUG_MUSTACHE";

            "$(this.bundle)($(bundle_name)): template_data:
                $(with)"
                comment => "Display the used template data",
                with => string_mustache("{{$-top-}}", "$(bundle_name)"),
                if => "DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE_JSON|DEBUG_MUSTACHE";

            "$(this.bundle)($(bundle_name)): def.json/def.cf:
              $(with)"
                comment => "Display the bundle json data defined in def.json/def.cf",
                with => string_mustache("{{$-top-}}", data_expand("def.$(bundle_name)")),
                if => "scl_def_json_$(bundle_name).(DEBUG_$(bundle_name)|DEBUG_MUSTACHE_JSON|DEBUG_MUSTACHE)";

            "$(this.bundle)($(bundle_name)): $(json_files)
                $(with)"
                with => string_mustache("{{$-top-}}", data_expand(readdata("$(template_dir)/$(json_files)", "auto"))),
                if => "DEBUG_$(bundle_name)|DEBUG_MUSTACHE_JSON|DEBUG_MUSTACHE";
@endif
}

@if minimum_version(99.9)
## scl_data_autorun(bundle_name)

This bundle wil take care of copying the json files from the policy hub to:
 * $(def.node_status_dir)/$(bundle_name)/json

After the copying it will merge all json files and the parsed data is available as:
 * cfengine: `$(scl.<bundle_name>[<var>])`
 * mustache: `vars.scl.<bundle_mame>.<var>`

After merging it will determine if we have to set cfengine classes based on the json variable
`classes` defined in the bundle json data.
@endif
bundle agent scl_data_autorun(bundle_name)
{
    methods:
        "" usebundle => scl_json_copy_and_merge("$(bundle_name)");
        "" usebundle => scl_json_classes_2_cfengine("$(bundle_name)");
}


@if minimum_version(99.9)
## scl_json_classes_2_cfengine(bundle_name)

This bundle is internally and will set cfengine classes based on the json `classes`
variable defined in the bundle json data, eg:
```json
"dhclient": {
    "classes": {
        "RESOLV_CONF": "any"
    }
}
```

This will set the class: `DHCLIENT_RESOLV_CONF` for class expression `any`.
all classes wil be prefix by the `bundle_name` in uppercase.
@endif
bundle agent scl_json_classes_2_cfengine(bundle_name)
{
    vars:
        "class_prefix" string => string_upcase($(bundle_name));
        "class_name" slist => getindices("scl.$(bundle_name)[classes]");

    classes:
        #"$(class_prefix)_$(scl.$(bundle_name)[classes])" expression => "any",
        #    scope => "namespace";

        "$(class_prefix)_$(class_name)" expression => "$(scl.$(bundle_name)[classes][$(class_name)])",
            comment => "Set classes bassed on cfengine class expression",
            scope => "namespace";

    reports:
        any::
            "$(this.bundle): Class set: $(class_prefix)_$(class_name) : $(scl.$(bundle_name)[classes][$(class_name)])"
                 if => "(DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE).$(class_prefix)_$(class_name)";

            #"Class is set: $(class_prefix)_$(scl.$(bundle_name)[classes])"
                 #if => "DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE";
}

@if minimum_version(99.9)
## scl_json_copy(bundle_name, json_files)

The bundle is internally and will take care of copying the json file(s) from the bundle data directory
on the policy hub to a the local node directory.
@endif
bundle agent scl_json_copy(service_name, files)
{
    vars:
        any::
            "service_json_dir"   string => "templates/scl/$(service_name)/json";

        SCLOCAL|TEMPLATE_LOCAL_COPY|JSON_LOCAL_COPY::
            "local_dir" string => "$(this.promise_dirname)/../../../../$(service_json_dir)",
                comment => "Can be replaced by $(sys.policy_entry_dirname)/../...";
            #"local_dir" string => "$(sys.policy_entry_dirname)/../$(service_json_dir)",
            #    comment => "Can be replaced by $(sys.policy_entry_dirname)/../";

    classes:
        cfengine_3_12_0|cfengine_3_12_1::
            "CF_COPY_BUG" expression => "any",
                comment =>  "https://github.com/cfengine/core/pull/3468";

    files:
        any::
            "$(def.node_template_dir)/$(service_name)/."
                comment => "Make sure the templatedir exsists for the service",
                perms => mog("0700", "root", "root"),
                create => "true";

        !(TEMPLATE_SKIP_COPY|SCLOCAL|TEMPLATE_LOCAL_COPY|JSON_LOCAL_COPY|JSON_SKIP_COPY)::
            "$(def.node_template_dir)/$(service_name)/$(files)"
                comment     => "Let's copy the json files",
                move_obstructions => "true",
                perms       => mog("0600", "root", "root"),
                copy_from   => remote_dcp("$(service_json_dir)/$(files)", "$(sys.policy_hub)"),
                classes     => results("bundle","$(service_name)$(files)");

        !CF_COPY_BUG.(SCLOCAL|TEMPLATE_LOCAL_COPY|JSON_LOCAL_COPY)::
            "$(def.node_template_dir)/$(service_name)/$(files)"
                comment     => "Let's copy the json files",
                move_obstructions => "true",
                perms       => mog("0600", "root", "root"),
                copy_from   => scl_dereference_dcp("$(local_dir)/$(files)"),
                classes     => results("bundle","$(service_name)$(files)");

        CF_COPY_BUG.(SCLOCAL|TEMPLATE_LOCAL_COPY|JSON_LOCAL_COPY)::
            "$(def.node_template_dir)/$(service_name)/$(files)"
                comment     => "Let's copy the json files",
                move_obstructions => "true",
                perms       => mog("0600", "root", "root"),
                copy_from   => local_dcp("$(local_dir)/$(files)"),
                classes     => results("bundle","$(service_name)$(files)");

    reports:
        any::
            "$(this.bundle)($(service_name)) json files:
                $(with)"
                with => format("%S", "files"),
                if => "DEBUG_$(service_name)|DEBUG|DEBUG_MUSTACHE_JSON|DEBUG_MUSTACHE";

            "$(this.bundle)($(service_name)):json file does not exists: '$(files)'"
                if => or( canonify("$(bundle_name)$(files)_failed") );

            "$(this.bundle)($(service_name)): copying json files from: $(local_dir)"
                if => "(SCLOCAL|TEMPLATE_LOCAL_COPY|JSON_LOCAL_COPY).(DEBUG_$(service_name)|DEBUG)";

        SKIP_SCLOCAL|TEMPLATE_SKIP_COPY|JSON_SKIP_COPY::
            "$(this.bundle): Skipped copying of json files";
}

@if minimum_version(99.9)
## scl_json_copy_and_merge(bundle_name)

It use the same setup as above. So the variables must be defined in:
 * `def.$(bundle_name)_json_files` (for global definitions)
 * `def.$(bundle_name)[json_files]`(used to override/extend the global ones)
 * `def.$(bundle_name)_local_generated_json_files` (for global definitions)
 * `def.$(bundle_name)[local_generated_json_files]` (used to override/extend the global ones)

This bundle will copy `def.$(bundle_name)_json_files` data files to `$(def.node_template_dir)/$(bundle_name)` directory.
It uses the following bundles:
 * `bundle agent scl_json_copy`
 * `bundle agent scl`

The bundle is called by:
 * scl_data_autorun or scl_mustache_autorun
@endif
bundle agent scl_json_copy_and_merge(bundle_name)
{
    vars:
        "files" data => parsejson('[
                    "default.json"
                ]
            ');

        "copy_files" data => parsejson('[
                    "default.json"
                ]
            ');


        ### Used in top level json files van be overriden by bundle definitions
        #
        def_set::
            "names" data => data_expand("def.$(bundle_name)_json_files");
            "files" data => mergedata("files", "names");
            "copy_files" data => mergedata("copy_files", "names");
        bundle_set::
            "names" data => data_expand("def.$(bundle_name)[json_files]");
            "files" data => mergedata("files", "names");
            "copy_files" data => mergedata("copy_files", "names");

        def_local_set::
            "names" data => data_expand("def.$(bundle_name)_local_generated_json_files");
            "files" data => mergedata("files", "names");
        bundle_local_set::
            "names" data => data_expand("def.$(bundle_name)[local_generated_json_files]");
            "files" data => mergedata("files", "names");

    classes:
        any::
            "bundle_set" expression => isvariable("def.$(bundle_name)[json_files]");
            "def_set" expression => isvariable("def.$(bundle_name)_json_files");

            "def_local_set" expression => isvariable("def.$(bundle_name)_local_generated_json_files");
            "bundle_local_set" expression => isvariable("def.$(bundle_name)[local_generated_json_files]");

    methods:
        any::
            "" usebundle => scl_json_copy("$(bundle_name)", "@(copy_files)");

            ## Now for each template run this method, loop over the key values of data files
            "" usebundle => scl("$(bundle_name)", "@(files)"),
               comment => "Sara mustache merge data files bundle";

        def_local_set|bundle_local_set::
            "" usebundle => scl_show_data("$(this.bundle)", "files"),
                if => "(DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE)";

    reports:
        any::
            "$(this.bundle) Note: only using: default.json"
                if => "!(bundle_set|def_set|local_set).(DEBUG_$(bundle_name)|DEBUG|DEBUG_MUSTACHE)";
}

@if minimum_version(99.9)
## scl_mustache_autorun(bundle_name)

This bundle will take of copying the mustache template file(s) and expanding the template(s)
@endif
bundle agent scl_mustache_autorun(service_name)
{
    methods:
        "" usebundle => scl_mustache_service_autorun("$(service_name)", "");
}

@if minimum_version(99.9)
## scl_mustache_service_autorun(bundle_name)

This bundle will take of copying the mustache template file(s) and expanding the template(s). The
parameter required is the `service_name` and optional we can specify form which bundle we need
to get the `template_2_destination` json definition from, eg:
 * `scl_mustache_service_autorun("resolv", "")`, uses `resolv.template_2_destination`
 * `scl_mustache_service_autorun("resolv", "resolv_define")`, uses `resolv_define.template_2_destination`
@endif
bundle agent scl_mustache_service_autorun(service_name, bundle_name)
{
    defaults:
        "bundle_name" string => "$(service_name)",  if_match_regex => "";

    vars:
        bundle_name_set::
            "template_files" slist => getindices("$(bundle_name).template_2_destination");

    classes:
        "bundle_name_set" expression => not(strcmp("", $(bundle_name))),
            comment => "Normal ordinng kicks in, so we need to check if bundle name is set";

    methods:
        bundle_name_set::
            "" usebundle => scl_mustache_copy("$(service_name)", "@(template_files)"),
                comment => "must add handle if we use 2 times in one bundle",
                handle => "$(service_name)_$(bundle_name)",
                comment => "Sara prepare mustache files bundle";

            "" usebundle => scl_mustache_expand( "$(service_name)", "$(bundle_name)"),
                comment => "Sara mustache expand template files bundle";

    reports:
            "$(this.bundle)($(service_name)) : called for '$(service_name)' with '$(bundle_name).template_2_destination' as input"
                if => "(DEBUG_$(service_name)|DEBUG|DEBUG_MUSTACHE)";
}

@if minimum_version(99.9)
## scl_mustache_copy(bundle_name, files)

The bundle is internally and will take care of copying the template file(s) from the bundle data directory
on the policy hub to a the local node directory. The bundle is called by:
 * scl_mustache_autorun
@endif
bundle agent scl_mustache_copy(service_name, files)
{
    vars:
        any::
            "service_template_dir"   string => "templates/scl/$(service_name)";
            "files" slist => getvalues("files"),
                comment => "make sure the argument is a list else debug output fails";

        SCLOCAL|TEMPLATE_LOCAL_COPY|MUSTACHE_LOCAL_COPY::
            "local_dir" string => "$(this.promise_dirname)/../../../../$(service_template_dir)",
                comment => "Can be replaced by $(sys.policy_entry_dirname)/../...";
            #"local_dir" string => "$(sys.policy_entry_dirname)/../$(service_template_dir)",
            #    comment => "Can be replaced by $(sys.policy_entry_dirname)/../";

    classes:
        cfengine_3_12_0|cfengine_3_12_1::
            "CF_COPY_BUG" expression => "any",
                comment =>  "https://github.com/cfengine/core/pull/3468";

    files:
        any::
            "$(def.node_template_dir)/$(service_name)/."
                comment => "Make sure the template dir exsists for the bundle",
                perms => mog("0700", "root", "root"),
                create => "true";

        !(TEMPLATE_SKIP_COPY|SCLOCAL|TEMPLATE_LOCAL_COPY|MUSTACHE_LOCAL_COPY|MUSTACHE_SKIP_COPY)::
            "$(def.node_template_dir)/$(service_name)/$(files)"
                comment     => "Let's copy the mustache files",
                move_obstructions => "true",
                perms       => mog("0600", "root", "root"),
                classes     => if_repaired("$(service_name)_mustache_copied"),
                copy_from   => remote_dcp("$(service_template_dir)/$(files)", "$(sys.policy_hub)");

       !CF_COPY_BUG.(SCLOCAL|TEMPLATE_LOCAL_COPY|MUSTACHE_LOCAL_COPY)::
            "$(def.node_template_dir)/$(service_name)/$(files)"
                comment     => "Let's copy the json files",
                move_obstructions => "true",
                perms       => mog("0600", "root", "root"),
                copy_from   => scl_dereference_dcp("$(local_dir)/$(files)"),
                classes     => if_repaired("$(service_name)_mustache_copied");

       CF_COPY_BUG.(SCLOCAL|TEMPLATE_LOCAL_COPY|MUSTACHE_LOCAL_COPY)::
            "$(def.node_template_dir)/$(service_name)/$(files)"
                comment     => "Let's copy the json files",
                move_obstructions => "true",
                perms       => mog("0600", "root", "root"),
                copy_from   => local_dcp("$(local_dir)/$(files)"),
                classes     => if_repaired("$(service_name)_mustache_copied");

    methods:
        any::
            "" usebundle => scl_show_data("scl_mustache_copy", "files"),
                comment => "So we can call this more than once in same bundle",
                handle => "$(service_name).$(files)",
                if => "DEBUG_$(service_name)|DEBUG|DEBUG_MUSTACHE_JSON|DEBUG_MUSTACHE";

    reports:
        any::
            "$(this.bundle)($(service_name)) copying template files from: $(local_dir)"
                if => "(SCLOCAL|TEMPLATE_LOCAL_COPY|MUSTACHE_LOCAL_COPY).(DEBUG_$(service_name)|DEBUG)";

        TEMPLATE_SKIP_COPY|MUSTACHE_SKIP_COPY::
            "$(this.bundle)($(service_name): Skipped copying of mustache files";
}

@if minimum_version(99.9)
## scl_mustache_expand(bundle_name)

This bundle is used internally and will expand the mustache template file(s) with the json data. The
bundle is called by:
 * scl_mustache_autorun
 * scl_mustache_service_autorun
@endif
bundle agent scl_mustache_expand(service_name, bundle_name)
{
    defaults:
        "bundle_name" string => "$(service_name)",  if_match_regex => "";

    vars:
        any::
            "template_files"    slist => getindices("$(bundle_name).template_2_destination");

    methods:
        "" usebundle => scl_mustache_cf_data_2_file("$(service_name)",
                "$(template_files)",
                "$($(bundle_name).template_2_destination[$(template_files)])",
                "");

    reports:
            "$(this.bundle)($(service_name)): '$(template_files)' --> '$($(bundle_name).template_2_destination[$(template_files)])'"
                if => "DEBUG_$(service_name)|DEBUG|DEBUG_MUSTACHE";
}

@if minimum_version(99.9)
## scl_mustache_cf_data_2_file(service_name, template_file, destination , data_section)

With this bundle you can generate a file from a template with cfengine internal json data. There are 2
options:
 1. json data section variable passed as argument. Then the section will be merged from the
    cfengine internal json data as toplevel. So variables in mustache file must be referenced
    without the service name, eg `<variable_name>` instead of `vars.scl.$(service_name).<variable_name>`
 1. cfengine internal json data if you do not pass your own json data section variable

The template is fetch from the local node direcrory:
 * `$(def.node_template_dir)/$(service_name)/$(template_file)`

When json data section variable is specified. You must specify which date section you want to use. The json
files must be merged via scl, as we only can merge data from this bundle, eg:
 * `scl.<service_name>[$(data_section)]`

This data will then be used as toplevel for the mustache template. You can just use the variables
name(s): `<variable_name>`
@endif
bundle agent scl_mustache_cf_data_2_file(service_name, template_file, destination, data_section)
{

    vars:
        any::
            "template_dir"     string => "$(def.node_template_dir)/$(service_name)";

            "data_section_str" string => format("%S", "$(data_section)"),
                if => "DEBUG_$(service_name)|DEBUG|DEBUG_MUSTACHE";

    classes:
        #"data_section"     expression => isvariable("data_section"),
        "data_section"     expression => regcmp("[a-zA-Z].*", "$(data_section)"),
            comment => "data_section defined do use it",
            scope => "bundle";

        "destination_set" expression => regcmp("^/.*", "$(destination)");


    files:
       data_section.destination_set::
                "$(destination)"
                    comment         => "Mustache expand with defined data_section variable ",
                    create          => "true",
                    edit_template   => "$(template_dir)/$(template_file)",
                    template_method => "mustache",
                    #template_data   => mergedata("scl.$(service_name)[$(data_section)]"),
                    template_data   => mergedata("$(data_section)"),
                    classes         => if_repaired("scl$(destination)");

       !data_section.destination_set::
                "$(destination)"
                    comment         => "Mustache expand with cfengine json data",
                    create          => "true",
                    edit_template   => "$(template_dir)/$(template_file)",
                    template_method => "mustache",
                    classes         => if_repaired("scl$(destination)");

    reports:
        any::
            "$(service_name) : '$(destination)' has been generated"
                if => canonify("scl$(destination)");

       destination_set::
            "$(this.bundle)($(service_name)): Template '$(template_file)' : '$(destination)'"
                if => "DEBUG_$(service_name)|DEBUG|DEBUG_MUSTACHE";

       !destination_set::
            "$(this.bundle)($(service_name)): Skipping generation for template: '$(template_file)'"
                if => "DEBUG_$(service_name)|DEBUG|DEBUG_MUSTACHE";

       data_section::
            "   data section used: $(data_section_str)"
                if => "DEBUG_$(service_name)|DEBUG|DEBUG_MUSTACHE";
}

bundle agent scl_show_data(bundle_name, var)
{
    ## https://tracker.mender.io/browse/CFE-2434 bug in passing data containers with vars
    reports:
        any::
@if minimum_version(3.11)
            "$(this.bundle): $(bundle_name).$(var)
                $(with)"
                comment => "Display the bundle variable data",
                with => string_mustache("{{$-top-}}", data_expand("$(bundle_name).$(var)"));
@endif
}

bundle agent scl_template_autorun(service_name)
{
    methods:
        "" usebundle => scl_data_autorun("$(service_name)");
        "" usebundle => scl_mustache_service_autorun("$(service_name)", "");
}
