#
## tcpwrappers.cf @SURFsara
#
bundle common tcpwrappers()
{
    vars:

        any::
            "config_dir"            string => "/etc";
            "allow"                 string => "$(config_dir)/hosts.allow";
            "deny"                  string => "$(config_dir)/hosts.deny";
            "owner"                 string => "root";
            "group"                 string => "root";
            "mode"                  string => "0444";


            ## Mustache templates
            "template_2_destination" data => parsejson('
                    {
                        "hosts.allow.mustache" : "$(allow)"
                        "hosts.deny.mustache" : "$(deny)"
                    }
                ');

        centos::
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "tcp_wrappers" : ""
                        }
                    }
                ');
        debian::
            "packages"  data  => parsejson('
                    {
                        "install": {
                            "tcpd" : ""
                        }
                    }
                ');
}

bundle agent tcpwrappers_autorun()
{
    meta:
        "tags" slist => { "autorun", "template_tcpwrappers" };

    methods:
        any::
            "" usebundle => sara_data_autorun("tcpwrappers");
            "" usebundle => tcpwrappers_install();
            "" usebundle => tcpwrappers_surfsara_config();
}

bundle agent tcpwrappers_config()
{
    methods:
        any::
            "" usebundle => sara_data_autorun("tcpwrappers");
            "" usebundle => tcpwrappers_install();
            "" usebundle => tcpwrappers_surfsara_config();
}

bundle agent tcpwrappers_install()
{
    methods:
        "" usebundle =>  sara_service_packages("tcpwrappers", "@(tcpwrappers.packages)");
}

bundle agent tcpwrappers_surfsara_config()
{
    vars:
        "tcpwrapper_files" slist => { "$(tcpwrappers.allow)", "$(tcpwrappers.deny)" };

    files:
        "$(tcpwrapper_files)"
            comment => "Must be readable by everyone",
            perms => mog("$(tcpwrappers.mode)", "$(tcpwrappers.owner)", "$(tcpwrappers.group)");

    methods:
            "" usebundle => sara_mustache_autorun("tcpwrappers");
}

@if minimum_version(99.9)
# tcpwrappers

Source: [tcpwrappers.cf](/services/tcpwrappers.cf)

This bundle will generate these files from mustache templates:
 * /etc/hosts.allow
 * /etc/hosts.deny

If one of the files is changed then the followong *class* will be set:
 *  sara_tcpwrappers_etc_hosts_allow
 *  sara_tcpwrappers_etc_hosts_deny

These files will be generated with the aid of mustache templates with json data.
the templates are located in:
 * templates/tcpwrappers/
 * templates/tcpwrappers/json


## Usage

The bundle can be run via:
 * `def.sara_services_enabled`
```json
"vars": {
    "sara_services_enabled": [
            "...",
            "tcpwrappers",
            "..."
    ]
}
```

The bundle will always read the [default.json](/templates/tcpwrappers/json/default.json) file
and extra json file(s) can be specified via:
 * def.cf
```
vars:
    any::
        "tcpwrappers_json_files" slist => {
            "allow_ssh.json" ,
            "allow_http.json" ,
        };
```

The variable must be `tcpwrappers_json_files` and with this setup 2 extra json files are being merged.

### DEBUG

If you want to debug these bundle set the `DEBUG_tcpwrappers` class, eg:
 * `-DDEBUG_tcpwrappers

## def.cf/json

See [default.json](/templates/tcpwrappers/json/default.json) what the default values are and
which variables can be overriden

Here are some examples how to use it
 * specify tcpwrappers configuration in def.cf:
```
vars:
    "tcpwrappers_json_files" slist => { "allow_ssh.json", "allow_http.json" };
```

 * specify tcpwrappers configuration in def.json:
```json
"vars": {
    "tcpwrappers": {
        "json_files": [ "allow_ssh.json", "allow_http.json" ]
    }
}
```

 * override allow_ssh setting in def.cf:
```
vars:
    "tcpwrappers" data => parsejson( '{ "allow_ssh" : [ {"allow": ... } ] }');
```

 * override allow_ssh setting in def.json:
```json
"tcpwrappers" : {
    "json_files" : [ "allow_http.json" ],
    "allow_ssh": [
        { "allow": "10.101.32.0/255.255.255.0", "desc": "ALLOW admin lan" }
    ]
}
```
@endif
